TODOs
-----
Solved view
- difficulty
- user actions

Instructions popup
- keys
- cell click
- cell double click
- candidate double click

Play view
- version lower right
- grid background color
- text area background color

http://valor-software.com/ngx-bootstrap/#/tooltip


https://github.com/angular/angular-cli

https://github.com/ReactiveX/rxjs/
https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md

https://www.youtube.com/watch?v=ei7FsoXKPl0 -- 34:20 into it

Publish app on github pages
---------------------------
Ref: https://github.com/angular-buch/angular-cli-ghpages
One-time: $ npm i -g angular-cli-ghpages
          $ cd <project-dir>/
          $ cd sudoku/
General:  $ ng build --prod --base-href "https://USERNAME.github.io/REPOSITORY_NAME/"
Specific: $ ng build --prod --base-href "https://davlit.github.io/sudoku/"
          $ angular-cli-ghpages
Browser:  https://davlit.github.io/sudoku


Run:
$ ng serve

http://localhost:4200

Deploy 1 -- Dev Platform
------------------------
$ ng build --prod

Deploy 2 -- Target Host
-----------------------
- Download/install NodeJS: https://nodejs.org/en/
- Open a terminal window -- cmd on Windows
- > node -v
> npm -v
> npm install http-server -g

git
---
https://git-scm.com/book/en/v2/

Local Storage
-------------
http://diveraj.com/lets-make-tiny-gradebook-angular2-storage/

WebWorker Details
-----------------
AppComponent      CacheService                  CreationWorker         CreationService
  ngOnInit()  -->   replenishCache()
                    startWebworkerCreation() -->  postMessage(diff)
                                                      |
                                                      V
                                                  onMessage() -->       createSudoku(diff)
                                                                          [actual work]
                                                    customPostMessage()   <--
                      init()                      onmessage()


    cacheService.replenishCache()
      startWebworkerCreation()
        creationWorker.postMessage(diff)
CreationWorker        
  onmessage()
    creationService.createSudoku()
    customPostMessage()
CacheService
  init()
    creationWorker.onmessage()


A group with 3 value and 6 open cells
- if it has a naked quad, it also has a hidden pair

Group with 4 value and 5 open cells
- if it has a naked triple, it also has a hidden pair

group with 5 value and 4 open cells
- it it has a naked triple, it also has a hidden single

group 
1 open => naked single
2 open => 2 naked singles
          1 naked pair (not actionable)
3 open => 3 naked singles (x, y, z) (naked single caught first)
          1 naked pair, 1 naked single (xy, xy, z) (naked single caught first)
          xy xz yz
          (hidden pair not possible)
4 open => 4 naked singles (w, x, y, z)

wx, 
naked pair => hidden pairs
5 open: naked triple => hidden pairs
6 open: naked quad => hidden pair

naked pair   => 4+ open cells
naked triple => 5+ open cells
naked quad   => 6+ open cells

hidden pair   => 4+ open cells
hidden triple => 4+ open cells ???
hidden quad   => 5+ open cells

WebWorker Scheme
================
UI side
-------
PlayComponent
HintService
  HintLogService
SudokuService
  SudokuModel
  ActionLogService
CacheService
  localStorage

Web worker side
---------------
CreationService
HintService
  HintLogService
SudokuService
  SudokuModel
  ActionLogService

Shared
------ 
HintService
  HintLogService
SudokuService
  SudokuModel
  ActionLogService

app.module
----------
@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    HelpComponent,
    PlayComponent,
    PrintComponent,
    CounterComponent
  ],
  imports: [    
    BrowserModule,    @angular
    FormsModule,      @angular
    AppRoutingModule, @angular
    CreationModule,
    SharedModule
  ],
  providers: [
    CreationService, 
    CacheService, 
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

creation.module
---------------
@NgModule({
  imports: [
    SharedModule
  ],
  providers: [
    CreationService
  ]
})
export class CreationModule { }

shared.module
-------------
@NgModule({
  providers: [
    SudokuService,
      SudokuModel, 
      ActionLogService, 
    HintService, 
      HintLogService
  ]
})
export class SharedModule { }


CreationService -- Worker ---- CacheService -- PlayComponent -- user
                                 localStorage
user button 'Generate'
PlayComponent generate()
CacheService 
  retrieves sudoku from cache (localStorage)
  requests replacement sudoku from Worker
    (worker creates sudoku in background)
  worker delivers replacement sudoku
  stores replacement sudoku in cache(locaStorage)


on startup
CacheService
  look for 'holes' in cache (localStorage)
  loop over 'hole'
    request sudoku from Worker
      (worker creates sudoku in background)
    worker delivers replacement sudoku
    stores replacement sudoku in cache(locaStorage)

Modules
module          declarations        imports             providers           bootstrap
-------------------------------------------------------------------------------------
AppModule       AppComponent,       CreationModule,     CacheService,       AppComponent
                HomeComponent,      SharedModule        WebWorkerClient,
                HelpComponent,                          
                PlayComponent,
                PrintComponent,
                CounterComponent

CreationModule                      SharedModule        CreationService

SharedModule                                            SudokuService,
                                                        SudokuModel, 
                                                        ActionLogService, 
                                                        HintService, 
                                                        HintLogService


6/5/17
======Trigger: 
play.component.html - "Generate" button
play.component.ts - generate(difficulty: Difficulty) : void
  this.cacheService.getSudoku(difficulty)
  - loads suduku for user execution

cacheService.ts - this.cacheService.getSudoku(difficulty) : Puzzle
  this.creationService.createSudokuZ(difficulty)

  - TODO set up to receive web worker output
  ngOnInit() {
    const that = this;  // see https://stackoverflow.com/questions/24634484/javascript-that-vs-this
    this.creationWorker.onmessage = ((event: MessageEvent) => {
      that.zone.run(() => {   // for change detection
        that.webworkerDuration = ((new Date()).getTime() - that.webworkerStartTime) / 1000;
        that.webworkerResults = event.data.results;
      });
    });
  } // ngOnInit();

  - TODO prepare request -- just the given difficulty
  - TODO postMessage
  /**
   * Post a message to a web worker. The message contains the desired difficulty.
   * This message triggers the web worker which works in background. The 
   * result of the background task is posted by the web worker and this
   * service is alerted and reacts in the ngOnInit() function above.
   * 
   * Called by: TODO ... cacheService
   */
  public startWebworkerCreation() {
    this.webworkerStartTime = new Date();
    this.creationWorker.postMessage(this.difficulty);
  } // startWebworkerCreation()


[background]
creation.service.ts - 
  createSudokuZ(difficulty: Difficulty) : string

Actions & Undos
===============
Actions                                   component                         Sservice
-------                                   ---------                         --------
Set value (keyboard)                      handleKeyPress(keyEvent)          setValue(c, v)
                                                                              w/removeValue(c)
Set value (value picker)                  handleChoiceClick(v)              setValue(c, v)
                                                                              w/removeValue(c)
Set value (R click naked single)          handleCellClick(event, vb, vc)    setValue(c, naked)
Remove value (0 keyboard)                 handleKeyPress(keyEvent)          removeValue(c)
Remove value (value picker clear)         handleChoiceClearClick()          removeValue(c)
Replace value (kb) -- Remove/Set          handleKeyPress(keyEvent)          setValue(c, v)
Replace value (picker) -- Remove/Set      handleChoiceClick(v)              setValue(c, v)
Remove candidate (dbl click cand)         handleCandidateClick(vb, vc, k)   removeCandidate(c, k)
Restore candidate (dbl click empty cand)  handleCandidateClick(vb, vc, k)   restoreCandidate(c, k)
Refresh all candidates                    refreshCandidates()               refreshAllCandidates()
Undo last action                          undoLastAction()

actions:
  SET_VALUE,
  GUESS_VALUE,
  REMOVE_VALUE,
  REMOVE_CANDIDATE,
  RESTORE_CANDIDATE


setValue(c, v)
removeValue(c)
removeCandidate(c, k)
restoreCandidate(c, k)

undoLastAction()
  undo setValue -> removeValue (no log)
  undo removeValue -> setValue (no log)
  undo removeCandidate -> restoreCandidate (no log)
  undo restoreCandidate -> removeCandidate (no log)
  ...
  remove last action log entry
  refresh action log

Communication between AppComponent, CacheService, and CreationWorker  
====================================================================
2 mechanisms: 
  AppComponent <-> CacheService uses Web Worker methods
  CacheService <-> CreationWorker uses Observable & Subject
    for the latter see 
      http://jasonwatmore.com/post/2016/12/01/angular-2-communicating-between-components-with-observable-subject
Steps
1 - AppComponent requests something of CacheService
    a - Request from AppComponent
        ngOnInit() this.cacheService.replenishCache();
        generate(.) this.cacheService.getSudoku(.)
    b - Receipt by CacheService
        replenishCache()
        getSudoku(.)
2 - CacheService requests something of CreationWorker
    a - Request from CacheService
        replenishCache() this.creationWorker.postMessage(.)
        getSudoku(.) -> replenishCache() this.creationWorker.postMessage(.)
    b - Receipt by CreationWorker
        onmessage event creationService.createSudoku(.)
        -- CreationService creates a sudoku in background: web worker --
3 - CreationWorker sends a newly created sudoku to CacheService
    a - Sudoku send from CreationWorker
        onmessage customPostMessage(.)
    b - Sudoku received by CacheService and is cached
        init() creationWorker.onmessage event
4 - CacheService sends the sudoku to AppComponent
    a - Notification send from CacheService
        onmessage sendMessage(.)
    b - Notification received by AppComponent
        constructor messageSubscription
