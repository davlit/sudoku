TODOs
-----
Solved view
- difficulty
- user actions

Instructions popup
- keys
- cell click
- cell double click
- candidate double click

Play view
- version lower right
- grid background color
- text area background color



https://github.com/angular/angular-cli

https://github.com/ReactiveX/rxjs/
https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md

https://www.youtube.com/watch?v=ei7FsoXKPl0 -- 34:20 into it

Run:
$ ng serve

http://localhost:4200

Deploy 1 -- Dev Platform
------------------------
$ ng build --prod

Deploy 2 -- Target Host
-----------------------
- Download/install NodeJS: https://nodejs.org/en/
- Open a terminal window -- cmd on Windows
- > node -v
> npm -v
> npm install http-server -g

git
---
https://git-scm.com/book/en/v2/

Local Storage
-------------
http://diveraj.com/lets-make-tiny-gradebook-angular2-storage/

A group with 3 value and 6 open cells
- if it has a naked quad, it also has a hidden pair

Group with 4 value and 5 open cells
- if it has a naked triple, it also has a hidden pair

group with 5 value and 4 open cells
- it it has a naked triple, it also has a hidden single

group 
1 open => naked single
2 open => 2 naked singles
          1 naked pairs (not actionable)
3 open => 3 naked singles
          1 naked pairs??????????
4 open: naked pairs => hidden pairs
5 open: naked trips => hidden pairs
6 open: naked quads => hidden pairs

naked pairs   => 4+ open cells
naked triples => 5+ open cells
naked quads   => 6+ open cells

WebWorker Scheme
================
UI side
-------
PlayComponent
HintService
  HintLogService
SudokuService
  SudokuModel
  ActionLogService
CacheService
  localStorage

Web worker side
---------------
CreationService
HintService
  HintLogService
SudokuService
  SudokuModel
  ActionLogService

Shared
------ 
HintService
  HintLogService
SudokuService
  SudokuModel
  ActionLogService

app.module
----------
@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    HelpComponent,
    PlayComponent,
    PrintComponent,
    CounterComponent
  ],
  imports: [    
    BrowserModule,    @angular
    FormsModule,      @angular
    AppRoutingModule, @angular
    CreationModule,
    SharedModule
  ],
  providers: [
    CreationService, 
    CacheService, 
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

creation.module
---------------
@NgModule({
  imports: [
    SharedModule
  ],
  providers: [
    CreationService
  ]
})
export class CreationModule { }

shared.module
-------------
@NgModule({
  providers: [
    SudokuService,
      SudokuModel, 
      ActionLogService, 
    HintService, 
      HintLogService
  ]
})
export class SharedModule { }


CreationService -- Worker ---- CacheService -- PlayComponent -- user
                                 localStorage
user button 'Generate'
PlayComponent generate()
CacheService 
  retrieves sudoku from cache (localStorage)
  requests replacement sudoku from Worker
    (worker creates sudoku in background)
  worker delivers replacement sudoku
  stores replacement sudoku in cache(locaStorage)


on startup
CacheService
  look for 'holes' in cache (localStorage)
  loop over 'hole'
    request sudoku from Worker
      (worker creates sudoku in background)
    worker delivers replacement sudoku
    stores replacement sudoku in cache(locaStorage)

Modules
module          declarations        imports             providers           bootstrap
-------------------------------------------------------------------------------------
AppModule       AppComponent,       CreationModule,     CacheService,       AppComponent
                HomeComponent,      SharedModule        WebWorkerClient,
                HelpComponent,                          
                PlayComponent,
                PrintComponent,
                CounterComponent

CreationModule                      SharedModule        CreationService

SharedModule                                            SudokuService,
                                                        SudokuModel, 
                                                        ActionLogService, 
                                                        HintService, 
                                                        HintLogService

---------------------------
app.AppComponent
  ngOnInit
    this.cacheService.replenishCache()
      for each empty cache keys
        let sudoku: string = this.creationService.createSudoku(DIFFICULTIES[i]); XXX
        localStorage.setItem(KEYS[i][j], sudoku);

    // spawn web worker 
    // arg: n: number
    // ret:                                                           
    private webWorkerCalculate(n: number) {
console.log('webWorkerCalculate() start, pass fib to wwSvc' + n);
        const promise = this._webWorkerService.run(this.fib, n);
        const result = new Result(n, 0, true);
        this.webWorkerResults.push(result);
        this.promises.push(promise);
        
        // promise.then(function (response: any) {
        promise.then((response: any) => {
            result.result = response;
            result.loading = false;
        });
console.log('                     finish ' + n);
    }
    
    // Background fn (CPU intense)
    // arg: n: number
    // ret: fib(n): number
    private fib(n: number) {
console.log('fib() start ' + n);
        const fib = (n: number): number => {
            if (n < 2) return 1;
            return fib(n - 1) + fib(n - 2);
        };
        
        return fib(n);
        // return n + 1;
    }
------------------
  // spawn web worker 
  // arg: n: number
  // ret:                                                           


  // CPU intense
  // arg: difficulty: Difficulty
  // ret: sudoku.serialize(): String
  createSudoku(difficulty: Difficulty) : string {

    let sudoku = new Puzzle();
    sudoku.desiredDifficulty = difficulty;

    // step 1 - generate random finished sudoku
    sudoku.completedPuzzle = this.makeRandomSolution();

    let pass = 0;

    // loop until we get sudoku of desired difficulty
    let desiredDifficulty = sudoku.desiredDifficulty;
    while (sudoku.actualDifficulty != desiredDifficulty) {
      pass++;

      // step 2 - create starting values by paring cells
console.log('Pass: ' + pass);
      this.getStartingValues(sudoku);

      if (sudoku.initialValues === undefined) {
        continue;   // desired difficulty has not been attained
      }

      // step 3 - solve puzzle to get stats and actual difficulty
      this.completePuzzle(sudoku);

      console.log('Diff: ' + sudoku.actualDifficulty);

    } // while not getting desired difficulty

    sudoku.generatePasses = pass;
    return sudoku.serialize();
  } // createSudoku()

const sudoku: string = '{"_initialValues":[4,9,0,0,0,0,0,6,7,0,2,0,3,0,7,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,2,0,4,0,7,8,4,0,0,0,2,1,6,0,5,0,7,0,0,0,0,0,0,0,0,0,9,0,6,0,0,0,0,0,4,0,8,0,3,0,9,3,0,0,0,0,0,5,4],"_completedPuzzle":[4,9,3,5,2,1,8,6,7,8,2,6,3,4,7,5,9,1,5,1,7,6,8,9,4,2,3,3,6,9,8,1,2,7,4,5,7,8,4,9,3,5,2,1,6,1,5,2,7,6,4,3,8,9,2,4,5,1,9,3,6,7,8,6,7,1,4,5,8,9,3,2,9,3,8,2,7,6,1,5,4],"_desiredDifficulty":0,"_actualDifficulty":0,"_generatePasses":1,"_stats":"{\"nakedSingles\":36,\"hiddenSinglesRow\":12,\"hiddenSinglesCol\":4,\"hiddenSinglesBox\":1,\"nakedPairsRow\":0,\"nakedPairsCol\":0,\"nakedPairsBox\":0,\"pointingRows\":0,\"pointingCols\":0,\"rowBoxReductions\":0,\"colBoxReductions\":0,\"nakedTriplesRow\":0,\"nakedTriplesCol\":0,\"nakedTriplesBox\":0,\"nakedQuadsRow\":0,\"nakedQuadsCol\":0,\"nakedQuadsBox\":0,\"hiddenPairsRow\":0,\"hiddenPairsCol\":0,\"hiddenPairsBox\":0,\"hiddenTriplesRow\":0,\"hiddenTriplesCol\":0,\"hiddenTriplesBox\":0,\"hiddenQuadsRow\":0,\"hiddenQuadsCol\":0,\"hiddenQuadsBox\":0,\"guesses\":0}"}';

{"_initialValues":[4,9,0,0,0,0,0,6,7,0,2,0,3,0,7,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,2,0,4,0,7,8,4,0,0,0,2,1,6,0,5,0,7,0,0,0,0,0,0,0,0,0,9,0,6,0,0,0,0,0,4,0,8,0,3,0,9,3,0,0,0,0,0,5,4],
"_completedPuzzle":[4,9,3,5,2,1,8,6,7,8,2,6,3,4,7,5,9,1,5,1,7,6,8,9,4,2,3,3,6,9,8,1,2,7,4,5,7,8,4,9,3,5,2,1,6,1,5,2,7,6,4,3,8,9,2,4,5,1,9,3,6,7,8,6,7,1,4,5,8,9,3,2,9,3,8,2,7,6,1,5,4],
"_desiredDifficulty":0,
"_actualDifficulty":0,
"_generatePasses":1,
"_stats":"{
	\"nakedSingles\":36,
	\"hiddenSinglesRow\":12,
	\"hiddenSinglesCol\":4,
	\"hiddenSinglesBox\":1,
	\"nakedPairsRow\":0,
	\"nakedPairsCol\":0,
	\"nakedPairsBox\":0,
	\"pointingRows\":0,
	\"pointingCols\":0,
	\"rowBoxReductions\":0,
	\"colBoxReductions\":0,
	\"nakedTriplesRow\":0,
	\"nakedTriplesCol\":0,
	\"nakedTriplesBox\":0,
	\"nakedQuadsRow\":0,
	\"nakedQuadsCol\":0,
	\"nakedQuadsBox\":0,
	\"hiddenPairsRow\":0,
	\"hiddenPairsCol\":0,
	\"hiddenPairsBox\":0,
	\"hiddenTriplesRow\":0,
	\"hiddenTriplesCol\":0,
	\"hiddenTriplesBox\":0,
	\"hiddenQuadsRow\":0,
	\"hiddenQuadsCol\":0,
	\"hiddenQuadsBox\":0,
	\"guesses\":0}"
}

