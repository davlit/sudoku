{"version":3,"sources":["webpack:///webpack/bootstrap e19600ca6c71dcc1a29e","webpack:///./src/app/common/common.ts","webpack:///./src/app/hint/hint.type.ts","webpack:///./src/app/model/difficulty.ts","webpack:///./src/app/action/action.ts","webpack:///./src/app/hint/hint.ts","webpack:///./src/app/common/log.service.ts","webpack:///./src/app/hint/hintCounts.ts","webpack:///./src/app/model/naked.type.ts","webpack:///./src/app/model/puzzle.ts","webpack:///./src/web-workers/creation-worker/creation.worker.ts","webpack:///./src/app/action/action-log.service.ts","webpack:///./src/app/hint/hint-log.service.ts","webpack:///./src/app/hint/hint.service.ts","webpack:///./src/app/model/sudoku.service.ts","webpack:///./src/web-workers/creation-worker/creation.service.ts"],"names":[],"mappings":"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AE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AAErE,IAAM,SAAS,GAAe,CAAC,CAAE,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,C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ACtC,sBAAe,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AAEtC,qBAAcqBAAcqBAAcqBAAcqBAAcqB,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;AAC3I,4BAAqB,GAAG,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,CAAC,CAAC;AAC3I,4BAAqB,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE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","file":"src/web-workers/creation-worker/creation.worker.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e19600ca6c71dcc1a29e","export const TITLE = 'Sudoku Helper';\nexport const MAJOR_VERSION = '0';\nexport const VERSION = '16';\nexport const SUB_VERSION = '4';\nexport const COPYRIGHT = \n    'Copyright © 2016-2017 by David Little. All Rights Reserved.';\n\nexport const VALUES: number[] =       [ 1,  2,  3,  4,  5,  6,  7,  8,  9];\nexport const CANDIDATES: number[] = VALUES;\n\nexport const GROUPS: number[] =       [ 0,  1,  2,  3,  4,  5,  6,  7,  8];\nexport const ROWS: number[] = GROUPS;\nexport const COLS: number[] = GROUPS;\nexport const BOXS: number[] = GROUPS;\n\nexport const CELLS: number[] =        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,\n                                        9, 10, 11, 12, 13, 14, 15, 16, 17,\n                                       18, 19, 20, 21, 22, 23, 24, 25, 26,\n                                       27, 28, 29, 30, 31, 32, 33, 34, 35,\n                                       36, 37, 38, 39, 40, 41, 42, 43, 44,\n                                       45, 46, 47, 48, 49, 50, 51, 52, 53,\n                                       54, 55, 56, 57, 58, 59, 60, 61, 62,\n                                       63, 64, 65, 66, 67, 68, 69, 70, 71,\n                                       72, 73, 74, 75, 76, 77, 78, 79, 80];\n\nexport const ROW_CELLS: number[][] = [[ 0,  1,  2,  3,  4,  5,  6,  7,  8],\n                                      [ 9, 10, 11, 12, 13, 14, 15, 16, 17],\n                                      [18, 19, 20, 21, 22, 23, 24, 25, 26],\n                                      [27, 28, 29, 30, 31, 32, 33, 34, 35],\n                                      [36, 37, 38, 39, 40, 41, 42, 43, 44],\n                                      [45, 46, 47, 48, 49, 50, 51, 52, 53],\n                                      [54, 55, 56, 57, 58, 59, 60, 61, 62],\n                                      [63, 64, 65, 66, 67, 68, 69, 70, 71],\n                                      [72, 73, 74, 75, 76, 77, 78, 79, 80]];\n\nexport const COL_CELLS: number[][] = [[ 0,  9, 18, 27, 36, 45, 54, 63, 72],\n                                      [ 1, 10, 19, 28, 37, 46, 55, 64, 73],\n                                      [ 2, 11, 20, 29, 38, 47, 56, 65, 74],\n                                      [ 3, 12, 21, 30, 39, 48, 57, 66, 75],\n                                      [ 4, 13, 22, 31, 40, 49, 58, 67, 76],\n                                      [ 5, 14, 23, 32, 41, 50, 59, 68, 77],\n                                      [ 6, 15, 24, 33, 42, 51, 60, 69, 78],\n                                      [ 7, 16, 25, 34, 43, 52, 61, 70, 79],\n                                      [ 8, 17, 26, 35, 44, 53, 62, 71, 80]];\n\nexport const BOX_CELLS: number[][] = [[ 0,  1,  2,  9, 10, 11, 18, 19, 20],\n                                      [ 3,  4,  5, 12, 13, 14, 21, 22, 23],\n                                      [ 6,  7,  8, 15, 16, 17, 24, 25, 26],\n\n                                      [27, 28, 29, 36, 37, 38, 45, 46, 47],\n                                      [30, 31, 32, 39, 40, 41, 48, 49, 50],\n                                      [33, 34, 35, 42, 43, 44, 51, 52, 53],\n\n                                      [54, 55, 56, 63, 64, 65, 72, 73, 74],\n                                      [57, 58, 59, 66, 67, 68, 75, 76, 77],\n                                      [60, 61, 62, 69, 70, 71, 78, 79, 80]];\n\n// a completely valid sudoku\nexport const ROOT_VALUES: number[] =  [ 1, 2, 3, 4, 5, 6, 7, 8, 9,\n                                        4, 5, 6, 7, 8, 9, 1, 2, 3,\n                                        7, 8, 9, 1, 2, 3, 4, 5, 6, \n                                        2, 3, 4, 5, 6, 7, 8, 9, 1,\n                                        5, 6, 7, 8, 9, 1, 2, 3, 4,\n                                        8, 9, 1, 2, 3, 4, 5, 6, 7, \n                                        3, 4, 5, 6, 7, 8, 9, 1, 2, \n                                        6, 7, 8, 9, 1, 2, 3, 4, 5, \n                                        9, 1, 2, 3, 4, 5, 6, 7, 8];\n/**\n * randomize:\n * of rows 0, 1, 2, randomly select 2, swap the 2 rows\n * of rows 5, 5, 6, randomly select 2, swap the 2 rows\n * of rows 7, 8, 9, randomly select 2, swap the 2 rows\n * of cols 0, 1, 2, randomly select 2, swap the 2 cols\n * of cols 5, 5, 6, randomly select 2, swap the 2 cols\n * of cols 7, 8, 9, randomly select 2, swap the 2 cols\n * of a blocks of 3 rows (1,2,3) (4,5,6) (7,8,9),\n *   rendomly select 2, swap them\n * of a blocks of 3 cols (1,2,3) (4,5,6) (7,8,9),\n *   rendomly select 2, swap them\n */\n\nconst enum SequenceType {\n  SEQUENTIAL,\n  RANDOM\n}\n\nexport class Common {\n\n  // static calcBoxNumber(row: number, col: number) {\n  //   return (Math.floor((row - 1) / 3) * 3) + Math.floor((col - 1) / 3) + 1;\n  // };\n    \n  // row, col, box 1..9\n  // static calcBoxNumber(row: number, col: number) : number {\n  //   return (Math.floor((row - 1) / 3) * 3) + Math.floor((col - 1) / 3) + 1;\n  // };\n    \n  // return 1st row number (1..9) in box (1..9)\n  // static firstRowInBox(boxNr: number) : number {\n  //   return Math.ceil(boxNr / 3) + (Math.floor((boxNr - 1) / 3)) * 2;\n  // };\n  \n  // return 1st col number (1..9) in box (1..9)\n  // static firstColInBox(boxNr: number) : number {\n  //   return (((boxNr - 1) % 3) * 3) + 1;\n  // };\n  \n  // return RC of box (1..9) and cell (1..9) within box\n//   static cellRCInBox(boxNr: number, cellNr: number) : {r: number, c: number} {\n\n// // console.log('boxNr, cellNr: ' + boxNr +', ' + cellNr);\n    \n//     let r = Common.firstRowInBox(boxNr) + Math.floor((cellNr - 1) / 3);\n//     let c = Common.firstColInBox(boxNr) + ((cellNr - 1) % 3);\n\n// // console.log('boxNr, cellNr, r, c: ' + boxNr +', ' + cellNr + ', ' + r + ', ' + c);\n\n//     return {'r': r, 'c': c};\n//   };\n\n  /**\n   * LEGEND\n   * vb, vc - view (template/html) box, cell within box (zero-based 0..8)\n   * ur, uc, ub - user row, col, box (one-based 1..9)\n   * ci - cell index (zero-based 0..80)\n   * v - value (one-based 1..9, but zero --> no value)\n   * zr, zc, zb - internal row, col, box index (zero-based 0..8)\n   * \n   * CONVERSIONS\n   * vb, vc --> ci\n   * ci --> ur, uc, ub -- userRow, ...\n   * ci --> zr, zc, zb\n   */\n\n  /**\n   * Convert view box/cell to cell idx\n   * @param vb the view box that contains the cell\n   * @param vc the position if the cell in the view box\n   */\n  // static cellIdx(vb: number, vc: number) : number {\n  //   return (Math.floor(vb / 3) * 18) + (vb * 3) + (Math.floor(vc / 3) * 6) + vc;\n  // } // cellIdx()\n\n  /** Get row number 1..9 from cell index 0..80. */ \n  static userRow(cellIdx: number) : number {\n    return Math.floor(cellIdx / 9) + 1;\n  }\n\n  /** Get row number 1..9 from cell index 0..80. */ \n  static userCol(cellIdx: number) : number {\n    return (cellIdx % 9) + 1;\n  }\n\n  /** Get row number 1..9 from cell index 0..80. */ \n  static userBox(cellIdx: number) : number {\n    return (Math.floor(cellIdx / 27) * 3) + Math.floor((cellIdx % 9) / 3) + 1;\n  }\n\n  // static cellRC(cellIdx: number) : {r: number, c: number} {\n  //   return {r: this.userRow(cellIdx), c: this.userCol(cellIdx)}\n  // }\n\n    /**\n   * Translate cell's row and col (1..9) to cell index (0..80).\n   */\n  // static cellIdx(r: number, c: number) : number {\n  //   return 9 * r + c - 10;    // ((r - 1) * 9) + (c - 1)\n  // }\nstatic urcToCellIdx(r: number, c: number) : number {\n    return 9 * r + c - 10;    // ((r - 1) * 9) + (c - 1)\n  }\n\n  /**\n   * Translate cell index (0..80) to row index (0..8).\n   */\n  static rowIdx(cellIdx: number) : number {\n    return Math.floor(cellIdx / 9);\n  }\n\n  /**\n   * Translate cell index (0..80) to col index (0..8).\n   */\n  static colIdx(cellIdx: number) : number {\n    return cellIdx % 9;\n  }\n\n  /** \n   * Translate cell index (0..80) to box index (0..8).\n   */\n  static boxIdx(cellIdx: number) : number {\n    return (Math.floor(cellIdx / 27) * 3) + Math.floor((cellIdx % 9) / 3);\n  }\n\n/**\n   * Related cells share the same row, column, or box of the given cell. The \n   * given cell is not in the list of related cells. Any cell has 20 related \n   * cells: 8 from the row, 8 from the column and 4 from the box that are not \n   * in the row or column of the given cell.\n   */\n  static getRelatedCells(idx: number) : number[] {\n    let relatedCells: number[] = [];\n    let r = Common.rowIdx(idx);\n    let c = Common.colIdx(idx);\n    let b = Common.boxIdx(idx);\n    for (let r of ROW_CELLS[Common.rowIdx(idx)]) {\n      if (r === idx) {\n        continue;\n      }\n      relatedCells.push(r);\n    }\n    for (let c of COL_CELLS[Common.colIdx(idx)]) {\n      if (c === idx) {\n        continue;\n      }\n      relatedCells.push(c);\n    }\n    for (let b of BOX_CELLS[Common.boxIdx(idx)]) {\n      if (relatedCells.indexOf(b) < 0) {\n        relatedCells.push(b);\n      }\n    }\n    return relatedCells;\n  } // getRelatedCells()\n        \n  /**\n   * Return an array of pair combinations of items in a list.\n   */\n  static pairwise(list: any[]) : any[] {\n    let pairs: any[] = [];\n    let pos = 0;\n    for (let i = 0; i < list.length; i++) {\n      for (let j = i + 1; j < list.length; j++) {\n        pairs[pos++] = [list[i], list[j]];\n      }\n    }\n    return pairs;\n  }\n\n  /**\n   * Return an array of triple combinations of items in a list.\n   */\n  static tripwise(list: any[]) : any[] {\n    let trips: any[] = [];\n    let pos = 0;\n    for (let i = 0; i < list.length; i++) {\n      for (let j = i + 1; j < list.length; j++) {\n        for (let k = j + 1; k < list.length; k++) {\n          trips[pos++] = [list[i], list[j], list[k]];\n        }\n      }\n    }\n    return trips;\n  }\n\n  /**\n   * Return an array of quad combinations of items in a list.\n   */\n  static quadwise(list: any[]) : any[] {\n    let quads: any[] = [];\n    let pos = 0;\n    for (let i = 0; i < list.length; i++) {\n      for (let j = i + 1; j < list.length; j++) {\n        for (let k = j + 1; k < list.length; k++) {\n          for (let l = k + 1; l < list.length; l++) {\n            quads[pos++] = [list[i], list[j], list[k], list[l]];\n          }\n        }\n      }\n    }\n    return quads;\n  }\n\n  // static rowIdx(cellIdx: number) : number {\n  //   return Math.floor(cellIdx / 9);\n  // }\n\n  // static colIdx(cellIdx: number) : number {\n  //   return cellIdx % 9;\n  // }\n\n  // static boxIdx(cellIdx: number) : number {\n  //   return (Math.floor(cellIdx / 27) * 3) + Math.floor((cellIdx % 9) / 3);\n  // }\n\n  // use: formatString('{0} is dead, but {1} is alive!', ['ASP', 'ASP.NET']);\n  static formatString(format: string, args: any[]) {\n    return format.replace(/{(\\d+)}/g, function(match, number) {\n      return typeof args[number] != 'undefined' ? args[number] : match;\n    });\n  }\n\n  /**\n   * Right justify, space pad to field size; \n   */  \n  static pad(num: number, fieldSize: number) {\n    let s = num + '';\n    while (s.length < fieldSize) {\n      s = ' ' + s;\n    }\n    return s;\n  }\n\n  // fill an integer array with values 0, 1, 2, ..., size - 1\n  // randomize if random is specified\n  static makeIndexArray(size: number, sequenceType: SequenceType) : number[] {\n    let array: number[] = [];\n    for (let i = 0; i < size; i++) {\n      array[i] = i; \t// make it integer\n    }\n    if (sequenceType === SequenceType.RANDOM) {\n      Common.shuffleArray(array);\n    }\n    return array;\n  };\n  \n  static generateCellIndexesArray(sequenceType: SequenceType) \n      : {r: number, c: number}[] {\n    let cellIndexes: {r: number, c: number}[] = [];\n    for (let r = 1; r <= 9; r++) {\n      for (let c = 1; c <= 9; c++) {\n        cellIndexes.push({r: r, c: c});\n      }\n    }\n    if (sequenceType === SequenceType.RANDOM) {\n      Common.shuffleArray(cellIndexes);\n    }\n    return cellIndexes;\n  }\n\n  // shuffle array elements\n  static shuffleArray(array: any[]) : any[] {\n    let i: number, j: number, temp: any;\n    for (i = array.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  /**\n   * Represent the values of the sudoku as a single-line string.\n   * The string should be a 81-character string representing with each \n   * character representing a cell value. A blank cell is indicated by a \n   * period character ('.'). E.g.\n   * '..24..1.391.3...6......928......5..6..3.9.8..5..2......245......7...3.283.5..84..'\n  */\n  static valuesArrayToString(valuesArray: number[] ) : string {\n    let s = '';\n    let value: number;\n    for (let v of valuesArray) {\n      if (v === 0) {\n        s += '.';\n      } else {\n        s += v;\n      }\n    }\n    return s;\n  } // valuesArrayToString()\n\n  /**\n   * Convert an 80-length values string to a numeric array. E.g.\n   * '..24..1.391.3...6.. ...' produces \n   * [0,0,2,4,0,0,1,0,3,9,1,0,3,0,0,0,6,0,0, ...].\n   */\n  static valuesStringToArray(valuesString: string) : number[] {\n  //..24..1.391.3...6......928......5..6..3.9.8..5..2......245......7...3.283.5..84..\n    let v: number[] = [];\n    let sValue: string;\n    for (let i of CELLS) {\n      sValue = valuesString.charAt(i);\n      if (sValue === '.') {\n        v.push(0);\n        continue;\n      }\n      v.push(+sValue);\n    }\n    return v;\n  }\n\n  /**\n   * Translate cell index (0..80) as a row,col string, e.g '2,4'.\n   */\n  static toRowColString(idx: number) : string {\n    return (Common.rowIdx(idx) + 1) + ',' + (Common.colIdx(idx) + 1);\n  } // toRowColString()\n\n  // Translate view's box & row indexes to model row indexes (0..8)\n  // XXX\n  static viewToModelRow(br: number, cr: number) : number {\n    return (br * 3) + cr + 1;\n  } \n  \n  // Translate view's box column indexes to model column indexes (0..8)\n  // XXX\n  static viewToModelCol(bc: number, cc: number) : number {\n    return (bc * 3) + cc + 1;\n  } \n  \n  // Translate view's candidate cell indexes to model candidate (0..8)\n  // XXX\n  static viewToModelCand(kr: number, kc: number) : number {\n    return ((kr % 3) * 3) + kc + 1;\n  }\n  \n  /**\n   * Determine if an array of cell indexes are in the same row.\n   */\n  static areCellsInSameRow(cells: number[]) : boolean {\n    let row: number = Common.rowIdx(cells[0]);\n    for (let i = 1; i < cells.length; i++) {\n      if (Common.rowIdx(cells[i]) != row) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if an array of cell indexes are in the same column.\n   */\n  static areCellsInSameCol(cells: number[]) : boolean {\n    let col: number = Common.colIdx(cells[0]);\n    for (let i = 1; i < cells.length; i++) {\n      if (Common.colIdx(cells[i]) != col) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if an array of cell indexes are in the same box.\n   */\n  static areCellsInSameBox(cells: number[]) : boolean {\n    let box: number = Common.boxIdx(cells[0]);\n    for (let i = 1; i < cells.length; i++) {\n      if (Common.boxIdx(cells[i]) != box) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if two arrays are the same.\n   */\n  static isArraySame(array1: any[], array2: any[]) {\n    return array1.length == array2.length \n        && array1.every(function(element, index) {\n      return element === array2[index];\n    });\n  }\n\n  /**\n   * Convert elapsed seconds to hours, minutes, and seconds string.\n   */\n  static toElapsedTimeString(seconds: number) : string {\n    let secs = Math.floor(seconds % 60);\n    let mins = Math.floor((seconds / 60) % 60);\n    let hrs  = Math.floor((seconds / (60 * 60)) % 24);\n    let ss = (secs < 10) ? ('0' + secs) : (secs);\n    let mm = (mins <  1) ? ('0')        : (mins);\n    let hh = (hrs  <  1) ? ('')         : (hrs + ':');\n    return hh + mm + \":\" + ss;\n  }\n\n\n  // testing\n  static RANDOM_VALUES_1 = [8,3,1,2,9,7,4,5,6];\n  static RANDOM_VALUES_2 = [1,6,2,9,5,8,7,4,3];\n  static RANDOM_VALUES_3 = [2,6,8,7,5,1,9,3,4];\n  static RANDOM_VALUES_4 = [3,2,4,8,7,9,6,5,1];\n  static RANDOM_VALUES_5 = [7,8,2,1,5,6,9,3,4];\n\n  static RANDOM_CELLS_1 = [66,21,53,29,65,30,39,25,6,61,0,1,79,26,42,38,5,43,33,11,19,57,63,56,22,28,36,27,75,78,35,51,72,10,31,4,8,54,18,24,46,34,64,68,52,69,58,16,77,70,40,14,41,37,62,49,20,74,17,80,76,47,60,67,73,55,71,3,13,7,2,44,12,59,50,15,9,32,23,45,48];\n  static RANDOM_CELLS_2 = [6,27,53,49,10,9,46,71,40,44,36,67,75,30,74,63,77,21,12,58,51,72,55,29,56,15,22,13,39,28,52,57,65,19,66,3,7,59,62,54,4,11,17,70,50,14,25,24,48,20,18,35,69,76,68,0,43,45,38,26,60,47,61,80,32,5,2,31,79,37,8,23,73,42,1,41,64,33,34,16,78];\n  static RANDOM_CELLS_3 = [13,66,36,14,5,42,23,34,51,2,9,1,67,60,6,31,64,38,63,32,28,45,47,20,80,58,12,35,59,33,17,4,73,69,11,41,37,72,16,79,40,26,70,0,19,27,29,43,10,54,39,65,8,21,3,74,53,50,44,57,15,78,24,7,55,30,49,56,62,25,76,48,18,61,68,22,46,71,52,77,75];\n  static RANDOM_CELLS_4 = [43,7,16,34,67,2,46,20,17,55,6,71,48,11,60,27,66,52,14,70,73,63,41,53,30,25,47,31,1,61,32,57,18,51,59,40,29,74,78,39,68,19,58,4,54,79,13,65,77,45,44,56,10,35,24,36,5,23,37,9,28,8,62,15,49,22,33,76,26,75,80,69,21,50,3,64,0,12,38,72,42];\n  static RANDOM_CELLS_5 = [77,43,32,17,49,33,0,24,48,63,58,44,78,4,2,67,20,29,46,7,21,65,53,14,54,61,41,60,50,47,27,30,9,38,37,19,71,62,34,45,31,56,66,51,26,52,5,10,70,16,36,80,55,3,73,28,69,35,11,76,8,23,12,42,13,39,64,74,18,68,22,40,6,57,15,59,75,25,79,1,72];\n\n  static RANDOM_PARING_CELLS_1 = [31,13,16,25,2,21,38,7,1,40,17,28,8,9,23,12,19,14,26,34,6,20,39,0,32,22,10,18,36,37,27,15,30,4,29,5,33,3,24,11,35];\n  static RANDOM_PARING_CELLS_2 = [5,11,7,38,25,4,31,28,16,39,3,17,40,22,20,23,12,37,36,13,35,18,0,6,32,33,21,30,29,19,27,10,34,1,26,15,24,9,2,14,8];\n  static RANDOM_PARING_CELLS_3 = [34,35,24,36,19,39,22,20,16,28,13,2,33,11,0,5,10,29,21,25,4,23,14,1,32,37,9,38,7,27,30,15,8,40,3,31,26,12,6,18,17];\n  static RANDOM_PARING_CELLS_4 = [6,3,11,28,25,27,35,10,17,33,7,2,23,16,5,12,14,4,20,1,37,36,31,29,39,30,26,9,40,38,21,0,8,34,18,24,22,15,13,32,19];\n  static RANDOM_PARING_CELLS_5 = [8,7,22,24,34,39,19,18,13,23,32,17,14,9,35,10,28,21,6,31,16,11,29,36,38,25,0,12,15,4,2,33,30,26,20,5,1,3,37,40,27];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/common/common.ts","export const enum HintType {\n  // INITIAL_VALUE,\n\n  // easy\n  NAKED_SINGLE,       // 0\n  HIDDEN_SINGLE_ROW,\n  HIDDEN_SINGLE_COL,\n  HIDDEN_SINGLE_BOX,\n\n  // medium\n  NAKED_PAIRS_ROW,    // 4\n  NAKED_PAIRS_COL,\n  NAKED_PAIRS_BOX,\n  POINTING_ROW,\n  POINTING_COL,       // 8\n  ROW_BOX_REDUCTION,\n  COL_BOX_REDUCTION,\n\n  // hard\n  NAKED_TRIPLES_ROW,\n  NAKED_TRIPLES_COL,  // 12\n  NAKED_TRIPLES_BOX,\n\n  HIDDEN_PAIRS_ROW,\n  HIDDEN_PAIRS_COL,\n  HIDDEN_PAIRS_BOX,   // 16\n\n  NAKED_QUADS_ROW,\n  NAKED_QUADS_COL,\n  NAKED_QUADS_BOX,\n\n  HIDDEN_TRIPLES_ROW, // 20\n  HIDDEN_TRIPLES_COL,\n  HIDDEN_TRIPLES_BOX,\n\n  HIDDEN_QUADS_ROW,\n  HIDDEN_QUADS_COL,   // 24\n  HIDDEN_QUADS_BOX,\n\n  // hardest\n  GUESS               // 26\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/hint/hint.type.ts","export enum Difficulty {\r\n  EASY,\r\n  MEDIUM,\r\n  HARD,\r\n  HARDEST\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/model/difficulty.ts","// import { ActionType } from './action.type';\nimport { Hint } from '../hint/hint';\nimport { ValueHint } from '../hint/hint';\nimport { CandidatesHint } from '../hint/hint';\nimport { Common } from '../common/common';\n\nexport const enum ActionType {\n  SET_VALUE,\n  GUESS_VALUE,\n  // SET_INITIAL,\n  REMOVE_CANDIDATE\n}\n\nexport abstract class Action {\n  private _type: ActionType;\n  private _cell: number;\n  private _hint: Hint;\n\n  constructor(type: ActionType, cell: number, hint?: Hint) {\n    this._type = type;\n    this._cell = cell;\n    this._hint = hint;\n  }\n\n  get type() : number {\n    return this._type;\n  }\n  \n  get cell() : number {\n    return this._cell;\n  }\n\n  get hint() : Hint {\n    return this._hint;\n  }\n\n  toString() {\n    return '';\n  }\n\n}\n\nabstract class BaseValueAction extends Action {\n  private _value: number;\n\n  constructor(type: ActionType, cell: number, value: number, hint?: ValueHint) {\n    super(type, cell, hint);\n    this._value = value;\n  }\n\n  get value() : number {\n    return this._value;\n  }\n\n}\n\nexport class ValueAction extends BaseValueAction {\n\n  constructor(type: ActionType, cell: number, value: number, hint?: ValueHint) {\n    super(type, cell, value, hint);\n  }\n\n  toString() {\n    let s = super.toString() \n        + Common.formatString('Set {0} in {1},{2}',\n        [this.value, Common.userRow(this.cell), Common.userCol(this.cell)]);\n    if (this.hint) {\n      s += ' (' + this.hint.toString() + ')';\n    } else {\n      s += ' (User action)';\n    }\n    return s;\n  }\n\n}\n\nexport class GuessAction extends BaseValueAction {\n  private _possibleValues: number[];\n\n  constructor(type: ActionType, cell: number, value: number,\n      possibleValues: number[], hint?: ValueHint) {\n    super(type, cell, value, hint);\n    this._possibleValues = possibleValues;\n  }\n\n  get possibleValues() : number[] {\n    return this._possibleValues;\n  }\n\n  toString() : string {\n    let s = super.toString()\n        + Common.formatString(\n        'Guess {0} in {1},{2} with possibles {3}',\n        [this.value, Common.userRow(this.cell), Common.userCol(this.cell),\n           JSON.stringify(this._possibleValues)]);\n    if (this.hint) {\n      s += ' (' + this.hint.toString() + ')';\n    } else {\n      s += ' (User action)';\n    }\n    return s;\n  }\n    \n}\n\nexport class RemoveAction extends Action {\n  private _candidate: number;\n\n  constructor(type: ActionType, cell: number, candidate: number, hint?: CandidatesHint) {\n    super(type, cell, hint);\n    this._candidate = candidate;\n  }\n\n  get candidate() {\n    return this._candidate;\n  }\n\n  toString() {\n    let s = super.toString() \n        + Common.formatString('Remove candidate {0} in {1},{2}',\n            [this._candidate, Common.userRow(this.cell), Common.userCol(this.cell)]);\n    if (this.hint) {\n      s += ' (' + this.hint.toString() + ')';\n    } else {\n      s += ' (User action)';\n    }\n    return s;\n  }\n    \n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/action/action.ts","import { HintType } from './hint.type';\nimport { ActionType } from '../action/action';\nimport { Difficulty } from '../model/difficulty';\nimport { Common } from '../common/common';\n\n/**\n * Hint life cycle\n * - created in findX functions, e.g. findNakedSingles()\n * - logged to hintLog in applyHint()\n * - spawn an action in applyHint()\n * \n * Hint life cydle\n * - created and logged to hintLog in guess()\n * - spawn an action in guess()\n */\n\n// abstract\nexport abstract class Hint {\n  private _type: HintType;\n  private _difficultyRating: Difficulty;\n\n  constructor(type: HintType) {\n    this._type = type;\n  }\n\n  get type() : HintType {\n    return this._type;\n  }\n  \n  abstract getCell() : number;\n\n  abstract getValue() : number;\n\n  abstract getActionType() : ActionType;\n\n  // getDifficultyRating(): Difficulty {\n  //   switch (this.type) {\n  //     case HintType.NAKED_SINGLE:\n  //     case HintType.HIDDEN_SINGLE_ROW:\n  //     case HintType.HIDDEN_SINGLE_COL:\n  //     case HintType.HIDDEN_SINGLE_BOX:\n  //       return Difficulty.EASY;\n  //     default:\n  //       return Difficulty.MEDIUM;\n  //   }\n  // }\n\n  abstract getDifficultyRating(): Difficulty;\n\n  abstract toString() : string;\n  \n}\n\nexport class ValueHint extends Hint {\n  private _cell: number;\n  private _value: number;\n\n  constructor(type: HintType, cell: number, value: number) {\n    super(type);\n    this._cell = cell;\n    this._value = value;\n  }\n\n  get cell() : number {\n    return this._cell;\n  }\n\n  get value() : number {\n    return this._value;\n  }\n\n  getCell() : number {\n    return this._cell;\n  }\n\n  getValue() : number {\n    return this._value;\n  }\n\n  getActionType() : ActionType {\n    return ActionType.SET_VALUE;\n  }\n\n  getDifficultyRating(): Difficulty {\n    if (this.type === HintType.GUESS) {\n      return Difficulty.HARDEST;\n    }\n    return Difficulty.EASY;\n  }\n\n  toString() : string {\n\n    // convert 0-base rows, cols, boxs to 1-base (1..9)\n    let r = Common.userRow(this._cell);\n    let c = Common.userCol(this._cell);\n    let b = Common.userBox(this._cell);\n\n    switch(this.type) {\n      case HintType.NAKED_SINGLE:\n        return Common.formatString(\n          'Naked single {0} in {1},{2}',\n          [this._value, r, c]);\n      case HintType.HIDDEN_SINGLE_ROW:\n        return Common.formatString(\n          'Hidden single {0} in row, {1},{2}',\n          [this._value, r, c]);\n      case HintType.HIDDEN_SINGLE_COL:\n        return Common.formatString(\n          'Hidden single {0} in col, {1},{2}',\n          [this._value, r, c]);\n      case HintType.HIDDEN_SINGLE_BOX:\n        return Common.formatString(\n          'Hidden single {0} in box, {1},{2}',\n          [this._value, r, c]);\n      case HintType.GUESS:\n        return Common.formatString(\n          'Guess {0} in {1},{2}',\n          [this._value, r, c]);\n    } // switch\n  } // toString()\n}\n\nexport class CandidatesHint extends Hint {\n  private _cells: number[];\n  private _candidates: number[];\n  private _removals: {c: number, k: number}[];\n\n  constructor(type: HintType, cells: number[], \n      candidates: number[], removals: {c: number, k: number}[]) {\n    super(type);\n    this._cells = cells;\n    this._candidates = candidates.sort();\n    this._removals = removals;\n  }\n\n  get cells() : number[] {\n    return this._cells;\n  }\n\n  getCell() : number {\n    return this._cells[0];\n  }\n  \n  getValue() : number {\n    return undefined;\n  }\n\n  getActionType() : ActionType {\n    return ActionType.REMOVE_CANDIDATE;\n  }\n\n  get candidates() : number[] {\n    return this._candidates;\n  }\n  \n  get removals() : {c: number, k: number}[] {\n    return this._removals;\n  }\n\n  getDifficultyRating(): Difficulty { \n    if (this.type >= HintType.NAKED_TRIPLES_ROW) {\n      return Difficulty.HARD;\n    }\n    return Difficulty.MEDIUM;\n  }\n\n  toString() : string {\n\n    // convert 0-base rows, cols, boxs to 1-base (1..9)\n    let r = Common.userRow(this._cells[0]);\n    let c = Common.userCol(this._cells[0]);\n    let b = Common.userBox(this._cells[0]);\n\n    switch (this.type) {\n      case HintType.NAKED_PAIRS_ROW:\n        return Common.formatString(\n          'Naked pairs {0}/{1} in row {2}',\n          [this._candidates[0], this._candidates[1], r]);\n      case HintType.NAKED_PAIRS_COL:\n        return Common.formatString(\n          'Naked pairs {0}/{1} in col {2}',\n          [this._candidates[0], this._candidates[1], c]);\n      case HintType.NAKED_PAIRS_BOX:\n        return Common.formatString(\n          'Naked pairs {0}/{1} in box {2}',\n          [this._candidates[0], this._candidates[1], b]);\n\n      case HintType.POINTING_ROW:\n        return Common.formatString(\n          'Pointing row {0}, box {1}, candidate {2}',\n          [r, b, this._candidates[0]]);\n      case HintType.POINTING_COL:\n        return Common.formatString(\n          'Pointing column {0}, box {1}, candidate {2}',\n          [c, b, this._candidates[0]]);\n\n      case HintType.ROW_BOX_REDUCTION:\n        return Common.formatString(\n          'Box reduction in box {0}, row {1}, candidate {2}',\n          [b, r, this._candidates[0]]);\n      case HintType.COL_BOX_REDUCTION:\n        return Common.formatString(\n          'Box reduction in box {0}, column {1}, candidate {2}',\n          [b, c, this._candidates[0]]);\n\n      case HintType.NAKED_TRIPLES_ROW:\n        return Common.formatString(\n          'Naked triples {0}/{1}/{2} in row {3}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], r]);\n      case HintType.NAKED_TRIPLES_COL:\n        return Common.formatString(\n          'Naked triples {0}/{1}/{2} in column {3}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], c]);\n      case HintType.NAKED_TRIPLES_BOX:\n        return Common.formatString(\n          'Naked triples {0}/{1}/{2} in box {3}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], b]);\n\n      case HintType.NAKED_QUADS_ROW:\n        return Common.formatString(\n          'Naked quads {0}/{1}/{2}/{3} in row {4}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], this._candidates[3], r]);\n      case HintType.NAKED_QUADS_COL:\n        return Common.formatString(\n          'Naked quads {0}/{1}/{2}/{3} in column {4}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], this._candidates[3], c]);\n      case HintType.NAKED_QUADS_BOX:\n        return Common.formatString(\n          'Naked quads {0}/{1}/{2}/{3} in box {4}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], this._candidates[3], b]);\n\n      case HintType.HIDDEN_PAIRS_ROW:\n        return Common.formatString(\n          'Hidden pairs {0}/{1} in row {2}',\n          [this._candidates[0], this._candidates[1], r]);\n      case HintType.HIDDEN_PAIRS_COL:\n        return Common.formatString(\n          'Hidden pairs {0}/{1} in column {2}',\n          [this._candidates[0], this._candidates[1], c]);\n      case HintType.HIDDEN_PAIRS_BOX:\n        return Common.formatString(\n          'Hidden pairs {0}/{1} in box {2}',\n          [this._candidates[0], this._candidates[1], b]);\n\n      case HintType.HIDDEN_TRIPLES_ROW:\n        return Common.formatString(\n          'Hidden triples {0}/{1}/{2} in row {3}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], r]);\n      case HintType.HIDDEN_TRIPLES_COL:\n        return Common.formatString(\n          'Hidden triples {0}/{1}/{2} in column {3}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], c]);\n      case HintType.HIDDEN_TRIPLES_BOX:\n        return Common.formatString(\n          'Hidden triples {0}/{1}/{2} in box {3}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], b]);\n\n      case HintType.HIDDEN_QUADS_ROW:\n        return Common.formatString(\n          'Hidden quads {0}/{1}/{2}/{3} in row {4}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], this._candidates[3], r]);\n      case HintType.HIDDEN_QUADS_COL:\n        return Common.formatString(\n          'Hidden quads {0}/{1}/{2}/{3} in column {4}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], this._candidates[3], c]);\n      case HintType.HIDDEN_QUADS_BOX:\n        return Common.formatString(\n          'Hidden quads {0}/{1}/{2}/{3} in box {4}',\n          [this._candidates[0], this._candidates[1], this._candidates[2], this._candidates[3], b]);\n\n    } // switch\n  } // toString()\n}  \n\n\n\n// WEBPACK FOOTER //\n// ./src/app/hint/hint.ts","import { Common } from './common';\n\nexport abstract class LogService {\n  \n  private _log: any[] = [];\n  \n  constructor() {}\n\n  initialize() {\n    this._log = [];\n  }\n\n  removeAllEntries() {\n    this._log = [];\n  }\n\n  addEntry(entry: any) {\n    this._log.push(entry);\n  }\n\n  getLastEntry() : any {\n    return this._log.length > 0 ? this._log[this._log.length - 1] : undefined;\n  }\n\n  getAllEntries() : any[] {\n    return this._log;\n  }\n  \n  getSize() : number {\n    return this._log.length\n  }\n  \n  removeLastEntry() : void {\n    this._log.pop();\n  }\n  \n  toStringFirstFirst() : string {\n    let s = '';\n    let lineNr = 1;\n    for (let entry of this._log) {\n      s += Common.pad(lineNr++, 3) + '. ' \n          + entry.toString() + '\\n';\n    }\n    return s;\n  }\n  \n  toStringLastFirst() : string {\n    let s = '';\n    for (let lineNr = this._log.length; lineNr > 0; lineNr--) {\n      s += Common.pad(lineNr, 3) + '. ' \n          + this._log[lineNr - 1].toString() + '\\n';\n    }\n    return s;\n\n  }\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/common/log.service.ts","import { HintType } from './hint.type';\nimport { Difficulty } from '../model/difficulty';\n\nexport class HintCounts {\n\n  constructor() {}\n\n  nakedSingles: number = 0;\n\n  hiddenSinglesRow: number = 0;\n  hiddenSinglesCol: number = 0;\n  hiddenSinglesBox: number = 0;\n\n  nakedPairsRow: number = 0;\n  nakedPairsCol: number = 0;\n  nakedPairsBox: number = 0;\n\n  pointingRows: number = 0;\n  pointingCols: number = 0;\n\n  rowBoxReductions: number = 0;\n  colBoxReductions: number = 0;\n\n  nakedTriplesRow: number = 0;\n  nakedTriplesCol: number = 0;\n  nakedTriplesBox: number = 0;\n\n  nakedQuadsRow: number = 0;\n  nakedQuadsCol: number = 0;\n  nakedQuadsBox: number = 0;\n\n  hiddenPairsRow: number = 0;\n  hiddenPairsCol: number = 0;\n  hiddenPairsBox: number = 0;\n\n  hiddenTriplesRow: number = 0;\n  hiddenTriplesCol: number = 0;\n  hiddenTriplesBox: number = 0;\n\n  hiddenQuadsRow: number = 0;\n  hiddenQuadsCol: number = 0;\n  hiddenQuadsBox: number = 0;\n\n  guesses: number = 0;\n\n  serialize() : string {\n    return JSON.stringify({\n      \"nakedSingles\": this.nakedSingles,\n\n      \"hiddenSinglesRow\": this.hiddenSinglesRow,\n      \"hiddenSinglesCol\": this.hiddenSinglesCol,\n      \"hiddenSinglesBox\": this.hiddenSinglesBox,\n\n      \"nakedPairsRow\": this.nakedPairsRow,\n      \"nakedPairsCol\": this.nakedPairsCol,\n      \"nakedPairsBox\": this.nakedPairsBox,\n\n      \"pointingRows\": this.pointingRows,\n      \"pointingCols\": this.pointingCols,\n\n      \"rowBoxReductions\": this.rowBoxReductions,\n      \"colBoxReductions\": this.colBoxReductions,\n\n      \"nakedTriplesRow\": this.nakedTriplesRow,\n      \"nakedTriplesCol\": this.nakedTriplesCol,\n      \"nakedTriplesBox\": this.nakedTriplesBox,\n\n      \"nakedQuadsRow\": this.nakedQuadsRow,\n      \"nakedQuadsCol\": this.nakedQuadsCol,\n      \"nakedQuadsBox\": this.nakedQuadsBox,\n\n      \"hiddenPairsRow\": this.hiddenPairsRow,\n      \"hiddenPairsCol\": this.hiddenPairsCol,\n      \"hiddenPairsBox\": this.hiddenPairsBox,\n\n      \"hiddenTriplesRow\": this.hiddenTriplesRow,\n      \"hiddenTriplesCol\": this.hiddenTriplesCol,\n      \"hiddenTriplesBox\": this.hiddenTriplesBox,\n\n      \"hiddenQuadsRow\": this.hiddenQuadsRow,\n      \"hiddenQuadsCol\": this.hiddenQuadsCol,\n      \"hiddenQuadsBox\": this.hiddenQuadsBox,\n\n      \"guesses\": this.guesses\n    });\n  }\n\n  static deserialize(hintCountsData) : HintCounts {\n// console.log('hintCountsData: ' + hintCountsData);\n    let data = JSON.parse(hintCountsData);\n    let hintCounts = new HintCounts();\n    hintCounts.nakedSingles = data.nakedSingles;\n\n    hintCounts.hiddenSinglesRow = data.hiddenSinglesRow;\n    hintCounts.hiddenSinglesCol = data.hiddenSinglesCol;\n    hintCounts.hiddenSinglesBox = data.hiddenSinglesBox;\n\n    hintCounts.nakedPairsRow = data.nakedPairsRow;\n    hintCounts.nakedPairsCol = data.nakedPairsCol;\n    hintCounts.nakedPairsBox = data.nakedPairsBox;\n\n    hintCounts.pointingRows = data.pointingRows;\n    hintCounts.pointingCols = data.pointingCols;\n\n    hintCounts.rowBoxReductions = data.rowBoxReductions;\n    hintCounts.colBoxReductions = data.colBoxReductions;\n\n    hintCounts.nakedTriplesRow = data.nakedTriplesRow;\n    hintCounts.nakedTriplesCol = data.nakedTriplesCol;\n    hintCounts.nakedTriplesBox = data.nakedTriplesBox;\n\n    hintCounts.nakedQuadsRow = data.nakedQuadsRow;\n    hintCounts.nakedQuadsCol = data.nakedQuadsCol;\n    hintCounts.nakedQuadsBox = data.nakedQuadsBox;\n\n    hintCounts.hiddenPairsRow = data.hiddenPairsRow;\n    hintCounts.hiddenPairsCol = data.hiddenPairsCol;\n    hintCounts.hiddenPairsBox = data.hiddenPairsBox;\n\n    hintCounts.hiddenTriplesRow = data.hiddenTriplesRow;\n    hintCounts.hiddenTriplesCol = data.hiddenTriplesCol;\n    hintCounts.hiddenTriplesBox = data.hiddenTriplesBox;\n\n    hintCounts.hiddenQuadsRow = data.hiddenQuadsRow;\n    hintCounts.hiddenQuadsCol = data.hiddenQuadsCol;\n    hintCounts.hiddenQuadsBox = data.hiddenQuadsBox;\n\n    hintCounts.guesses = data.guesses;\n    return hintCounts;\n  }\n\n  incrementHintCount(hintType: HintType) {\n    switch (hintType) {\n      case HintType.NAKED_SINGLE:\n        this.nakedSingles++;\n      case HintType.HIDDEN_SINGLE_ROW:\n        this.hiddenSinglesRow++;\n      case HintType.HIDDEN_SINGLE_COL:\n        this.hiddenSinglesCol++;\n      case HintType.HIDDEN_SINGLE_BOX:\n        this.hiddenSinglesBox++;\n      case HintType.NAKED_PAIRS_ROW:\n        this.nakedPairsRow++;\n      case HintType.NAKED_PAIRS_COL:\n        this.nakedPairsCol++;\n      case HintType.NAKED_PAIRS_BOX:\n        this.nakedPairsBox++;\n      case HintType.POINTING_ROW:\n        this.pointingRows++;\n      case HintType.POINTING_COL:\n        this.pointingCols++;\n      case HintType.ROW_BOX_REDUCTION:\n        this.rowBoxReductions++;\n      case HintType.COL_BOX_REDUCTION:\n        this.colBoxReductions++;\n      case HintType.NAKED_TRIPLES_ROW:\n        this.nakedTriplesRow++;\n      case HintType.NAKED_TRIPLES_COL:\n        this.nakedTriplesCol++;\n      case HintType.NAKED_TRIPLES_BOX:\n        this.nakedTriplesBox++;\n      case HintType.HIDDEN_PAIRS_ROW:\n        this.hiddenPairsRow++;\n      case HintType.HIDDEN_PAIRS_COL:\n        this.hiddenPairsCol++;\n      case HintType.HIDDEN_PAIRS_BOX:\n        this.hiddenPairsBox++;\n      case HintType.NAKED_QUADS_ROW:\n        this.nakedQuadsRow++;\n      case HintType.NAKED_QUADS_COL:\n        this.nakedQuadsCol++;\n      case HintType.NAKED_QUADS_BOX:\n        this.nakedQuadsBox++;\n      case HintType.HIDDEN_TRIPLES_ROW:\n        this.hiddenTriplesRow++;\n      case HintType.HIDDEN_TRIPLES_COL:\n        this.hiddenTriplesCol++;\n      case HintType.HIDDEN_TRIPLES_BOX:\n        this.hiddenTriplesBox++;\n      case HintType.HIDDEN_QUADS_ROW:\n        this.hiddenQuadsRow++;\n      case HintType.HIDDEN_QUADS_COL:\n        this.hiddenQuadsCol++;\n      case HintType.HIDDEN_QUADS_BOX:\n        this.hiddenQuadsBox++;\n      case HintType.GUESS:\n        this.guesses++;\n    }\n  }\n\n  getNakedSingles() : number {\n    return this.nakedSingles;\n  }\n\n  getHiddenSingles() : number {\n    return this.hiddenSinglesRow\n         + this.hiddenSinglesCol\n         + this.hiddenSinglesBox;\n  }\n\n  getNakedPairs() : number {\n    return this.nakedPairsRow\n         + this.nakedPairsCol\n         + this.nakedPairsBox;\n  }\n\n  getPointingRowsCols() : number {\n    return this.pointingRows\n         + this.pointingCols;\n  }\n\n  getBoxReductions() : number {\n    return this.rowBoxReductions\n         + this.colBoxReductions;\n  }\n\n  getNakedTriples() : number {\n    return this.nakedTriplesRow\n         + this.nakedTriplesCol\n         + this.nakedTriplesBox;\n  }\n\n  getNakedQuads() : number {\n    return this.nakedQuadsRow\n         + this.nakedQuadsCol\n         + this.nakedQuadsBox;\n  }\n\n  getHiddenPairs() : number {\n    return this.hiddenPairsRow\n         + this.hiddenPairsCol\n         + this.hiddenPairsBox;\n  }\n\n  getHiddenTriples() : number {\n    return this.hiddenTriplesRow\n         + this.hiddenTriplesCol\n         + this.hiddenTriplesBox;\n  }\n\n  getHiddenQuads() : number {\n    return this.hiddenQuadsRow\n         + this.hiddenQuadsCol\n         + this.hiddenQuadsBox;\n  }\n\n  getGuesses() : number {\n    return this.guesses;\n  }\n\n  getTotalHints() : number {\n    return 0 \n      + this.nakedSingles \n\n      + this.hiddenSinglesRow \n      + this.hiddenSinglesCol \n      + this.hiddenSinglesBox\n\n      + this.nakedPairsRow \n      + this.nakedPairsCol \n      + this.nakedPairsBox\n\n      + this.pointingRows  \n      + this.pointingCols\n\n      + this.rowBoxReductions \n      + this.colBoxReductions\n\n      + this.nakedTriplesRow \n      + this.nakedTriplesCol \n      + this.nakedTriplesBox\n\n      + this.nakedQuadsRow\n      + this.nakedQuadsCol\n      + this.nakedQuadsBox\n\n      + this.hiddenPairsRow \n      + this.hiddenPairsCol \n      + this.hiddenPairsBox\n\n      + this.hiddenTriplesRow \n      + this.hiddenTriplesCol \n      + this.hiddenTriplesBox\n\n      + this.hiddenQuadsRow \n      + this.hiddenQuadsCol \n      + this.hiddenQuadsBox\n\n      + this.guesses;\n  }\n\n  /**\n   * Determine the difficulty of a sudoku based on the techniques required to\n   * achieve the solution.\n   */\n  getActualDifficulty() : Difficulty {\n\n    // HARDEST\n    if (this.guesses > 0) {\n      return Difficulty.HARDEST;\n    } \n    \n    // HARD\n    if (   this.getNakedTriples()  > 0\n        || this.getNakedQuads()    > 0\n        || this.getHiddenPairs()   > 0\n        || this.getHiddenTriples() > 0\n        || this.getHiddenQuads()   > 0) {\n      return Difficulty.HARD;\n    }\n    \n    // MEDIUM\n    if (   this.getNakedPairs()       > 0\n        || this.getPointingRowsCols() > 0\n        || this.getBoxReductions()    > 0) {\n      return Difficulty.MEDIUM;\n    }\n    \n    // EASY\n    if (   this.getHiddenSingles() > 0\n        || this.nakedSingles       > 0) {\n      return Difficulty.EASY;\n    }\n\n    return  Difficulty.EASY;\n  } // getDifficultyType()\n\n  /**\n   * \n   */\n  toString() : string {\n    let s ='';\n    s += 'NS   : ' + this.nakedSingles + '\\n'\n\n    s += 'HS*  : ' + this.hiddenSinglesRow + ', ' \n                   + this.hiddenSinglesCol + ', ' \n                   + this.hiddenSinglesBox + '\\n';\n\n    s += 'NP*  : ' + this.nakedPairsRow + ', ' \n                   + this.nakedPairsCol + ', ' \n                   + this.nakedPairsBox + '\\n';\n\n    s += 'P*   : ' + this.pointingRows  + ', ' \n                   + this.pointingCols + '\\n';\n\n    s += '*BR  : ' + this.rowBoxReductions + ', ' \n                   + this.colBoxReductions + '\\n';\n\n    s += 'NT*  : ' + this.nakedTriplesRow + ', ' \n                   + this.nakedTriplesCol + ', ' \n                   + this.nakedTriplesBox + '\\n';\n\n    s += 'NQ*  : ' + this.nakedQuadsRow + ', ' \n                   + this.nakedQuadsCol + ', ' \n                   + this.nakedQuadsBox + '\\n';\n\n    s += 'HP*  : ' + this.hiddenPairsRow + ', ' \n                   + this.hiddenPairsCol + ', ' \n                   + this.hiddenPairsBox + '\\n';\n\n    s += 'HT*  : ' + this.hiddenTriplesRow + ', ' \n                   + this.hiddenTriplesCol + ', ' \n                   + this.hiddenTriplesBox + '\\n';\n\n    s += 'HQ*  : ' + this.hiddenQuadsRow + ', ' \n                   + this.hiddenQuadsCol + ', ' \n                   + this.hiddenQuadsBox + '\\n';\n\n    s += 'G    : ' + this.guesses + '\\n';\n\n    s += 'Total: ' + this.getTotalHints();\n    return s;\n  }\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/hint/hintCounts.ts","export const enum NakedType {\n  SINGLE,\n  PAIR,\n  TRIPLE,\n  QUAD\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/model/naked.type.ts","import { Common } from '../common/common';\r\nimport { Difficulty } from './difficulty';\r\nimport { HintCounts } from '../hint/hintCounts';\r\n\r\nexport class Puzzle {\r\n  private _initialValues: number[];\r\n  private _completedPuzzle: number[];\r\n  private _desiredDifficulty: Difficulty;\r\n  private _actualDifficulty: Difficulty;\r\n  private _generatePasses: number;\r\n  private _solutionsCount: number;\r\n  private _stats: HintCounts;\r\n\r\n  constructor() {\r\n    this._initialValues = undefined;\r\n    this._completedPuzzle = undefined;\r\n    this._desiredDifficulty = undefined;\r\n    this._actualDifficulty = undefined;\r\n    this._actualDifficulty = undefined;\r\n    this._solutionsCount = undefined;\r\n    this._stats = undefined;\r\n  }\r\n\r\n  serialize() : string {\r\n    return JSON.stringify({\r\n      \"_initialValues\": this._initialValues,\r\n      \"_completedPuzzle\": this._completedPuzzle,\r\n      \"_desiredDifficulty\": this._desiredDifficulty,\r\n      \"_actualDifficulty\": this._actualDifficulty,\r\n      \"_generatePasses\": this._generatePasses,\r\n      \"_solutionsCount\": this._solutionsCount,\r\n      \"_stats\": this._stats.serialize()\r\n    });\r\n  } // serialize()\r\n\r\n  static deserialize(puzzleData) : Puzzle {\r\n// console.log(puzzleData.getStats());\r\n    let data = JSON.parse(puzzleData);\r\n    let puzzle = new Puzzle();\r\n    puzzle._initialValues = data._initialValues;\r\n    puzzle._completedPuzzle = data._completedPuzzle;\r\n    puzzle._desiredDifficulty = data._desiredDifficulty;\r\n    puzzle._actualDifficulty = data._actualDifficulty;\r\n    puzzle._generatePasses = data._generatePasses;\r\n    puzzle._solutionsCount = data._solutionsCount;\r\n    puzzle._stats = HintCounts.deserialize(data._stats);\r\n    return puzzle;\r\n  } // deserialize()\r\n\r\n  get initialValues() : number[] {\r\n    return this._initialValues;\r\n  }\r\n\r\n  set initialValues(initialValues: number[]) {\r\n    this._initialValues = initialValues;\r\n  }\r\n\r\n  get completedPuzzle() : number[] {\r\n    return this._completedPuzzle;\r\n  }\r\n\r\n  set completedPuzzle(completedPuzzle: number[]) {\r\n    this._completedPuzzle = completedPuzzle;\r\n  }\r\n\r\n  get desiredDifficulty() : Difficulty {\r\n    return this._desiredDifficulty;\r\n  }\r\n\r\n  set desiredDifficulty(difficulty: Difficulty) {\r\n    this._desiredDifficulty = difficulty;\r\n  }\r\n\r\n  get actualDifficulty() : Difficulty {\r\n    return this._actualDifficulty;\r\n  }\r\n\r\n  set actualDifficulty(difficulty: Difficulty) {\r\n    this._actualDifficulty = difficulty;\r\n  }\r\n\r\n  get generatePasses() : number {\r\n    return this._generatePasses;\r\n  }\r\n\r\n  set generatePasses(generatePasses: number) {\r\n    this._generatePasses = generatePasses;\r\n  }\r\n\r\n  get solutionsCount() : number {\r\n    return this._solutionsCount;\r\n  }\r\n\r\n  set solutionsCount(solutionsCount: number) {\r\n    this._solutionsCount = solutionsCount;\r\n  }\r\n\r\n  get stats() : HintCounts {\r\n    return this._stats;\r\n  }\r\n\r\n  set stats(stats: HintCounts) {\r\n    this._stats = stats;\r\n  }\r\n\r\n  getInitialEmptyCells() {\r\n    let emptyCells: number = 0;\r\n    for (let i of this._initialValues) {\r\n      if (i === 0) {\r\n        emptyCells++;\r\n      }\r\n    }\r\n    return emptyCells;\r\n  }\r\n\r\n  getInitialFilledCells() {\r\n    let filledCells: number = 0;\r\n    for (let i of this._initialValues) {\r\n      if (i != 0) {\r\n        filledCells++;\r\n      }\r\n    }\r\n    return filledCells;\r\n  }\r\n\r\n  static getDifficultyLabel(difficulty: Difficulty) : string {\r\n    switch (difficulty) {\r\n      // case Difficulty.UNKNOWN:\r\n      //   return 'Unknown';\r\n      case Difficulty.EASY:\r\n        return 'Easy';\r\n      case Difficulty.MEDIUM:\r\n        return 'Medium';\r\n      case Difficulty.HARD:\r\n        return 'Hard';\r\n      case Difficulty.HARDEST:\r\n        return 'Hardest';\r\n    }\r\n  }\r\n\r\n  toString() : string {\r\n    let s = '';\r\n    s += '-Initial given/empty/total cells: ' \r\n        + this.getInitialFilledCells() + '/'\r\n        + this.getInitialEmptyCells()  + '/'\r\n        + (this.getInitialFilledCells() + this.getInitialEmptyCells()) + '\\n';\r\n    s += '-Initial & finished values:\\n';\r\n    s += Common.valuesArrayToString(this._initialValues) + '\\n';\r\n    s += Common.valuesArrayToString(this._completedPuzzle) + '\\n';\r\n    s += '-Creation passes: ' + this._generatePasses + '\\n';\r\n    s += '-Difficulty desired/actual: ' \r\n        + Puzzle.getDifficultyLabel(this._desiredDifficulty) + '/'\r\n        + Puzzle.getDifficultyLabel(this._actualDifficulty) + '\\n';\r\n    if (this._solutionsCount) {\r\n      s += '-Solutions count: ' + this._solutionsCount + '\\n';\r\n    }\r\n    if (this._stats) {\r\n      s += '-Stats:\\n' + this._stats.toString() + '\\n';\r\n    }\r\n    return s;\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/model/puzzle.ts","console.log('Creation web worker loaded.');\n\nimport { Difficulty } from '../../app/model/difficulty';\nimport { CreationService } from './creation.service';\n\n// prevent TypeScript compile error\nconst customPostMessage: any = postMessage;\n\n// the worker has an instance of the CPU-intensive service\nconst creationService = new CreationService();\n\n// onmessage executes when a posted message is received by the web worker.\nonmessage = (event: any) => {\n  let difficulty: Difficulty = event.data;\n  // let createdSudoku: string = undefined;\n\nconsole.info('creation.worker.onmessage difficullty: ' + difficulty);\n\n  // perform CPU-intense task in web worker\n  let createdSudoku: string = creationService.createSudoku(difficulty);\n\nconsole.info('creation.worker created diff: ' + difficulty);\n\n  // post a message with result back to the requester (AppComponent)\n  customPostMessage(createdSudoku);\n  // customPostMessage('A B C');\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/web-workers/creation-worker/creation.worker.ts","// import { Injectable } from '@angular/core';\n\nimport { LogService } from '../common/log.service';\nimport { Action } from './action';\n\n// @Injectable()\nexport class ActionLogService extends LogService {\n  \n  public addEntry(entry: Action) : void {\n    super.addEntry(entry);\n  }\n\n  public getLastEntry() : Action {\n    return super.getLastEntry();\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/action/action-log.service.ts","// import { Injectable } from '@angular/core';\n\nimport { LogService } from '../common/log.service';\nimport { Hint } from './hint';\nimport { HintType } from './hint.type';\nimport { HintCounts } from './hintCounts';\n\n// @Injectable()\nexport class HintLogService extends LogService {\n  \n  public addEntry(entry: Hint) : void {\n    super.addEntry(entry);\n  }\n\n  public getAllEntries() : Hint[] {\n    return super.getAllEntries();\n  }\n\n  public getLastEntry() : Hint {\n    return super.getLastEntry();\n  }\n  \n  public getHintCounts() : HintCounts {\n    let hintCounts = new HintCounts();\n    for (let hint of this.getAllEntries()) {\n      switch (hint.type) {\n        case HintType.NAKED_SINGLE:\n          hintCounts.nakedSingles++;\n          break;\n\n        case HintType.HIDDEN_SINGLE_ROW:\n          hintCounts.hiddenSinglesRow++;\n          break;\n        case HintType.HIDDEN_SINGLE_COL:\n          hintCounts.hiddenSinglesCol++;\n          break;\n        case HintType.HIDDEN_SINGLE_BOX:\n          hintCounts.hiddenSinglesBox++;\n          break;\n\n        case HintType.NAKED_PAIRS_ROW:\n          hintCounts.nakedPairsRow++;\n          break;\n        case HintType.NAKED_PAIRS_COL:\n          hintCounts.nakedPairsCol++;\n          break;\n        case HintType.NAKED_PAIRS_BOX:\n          hintCounts.nakedPairsBox++;\n          break;\n\n        case HintType.POINTING_ROW:\n          hintCounts.pointingRows++;\n          break;\n        case HintType.POINTING_COL:\n          hintCounts.pointingCols++;\n          break;\n\n        case HintType.ROW_BOX_REDUCTION:\n          hintCounts.rowBoxReductions++;\n          break;\n        case HintType.COL_BOX_REDUCTION:\n          hintCounts.colBoxReductions++;\n          break;\n\n        case HintType.NAKED_TRIPLES_ROW:\n          hintCounts.nakedTriplesRow++;\n          break;\n        case HintType.NAKED_TRIPLES_COL:\n          hintCounts.nakedTriplesCol++;\n          break;\n        case HintType.NAKED_TRIPLES_BOX:\n          hintCounts.nakedTriplesBox++;\n          break;\n\n        case HintType.NAKED_QUADS_ROW:\n          hintCounts.nakedQuadsRow++;\n          break;\n        case HintType.NAKED_QUADS_COL:\n          hintCounts.nakedQuadsCol++;\n          break;\n        case HintType.NAKED_QUADS_BOX:\n          hintCounts.nakedQuadsBox++;\n          break;\n\n        case HintType.HIDDEN_PAIRS_ROW:\n          hintCounts.hiddenPairsRow++;\n          break;\n        case HintType.HIDDEN_PAIRS_COL:\n          hintCounts.hiddenPairsCol++;\n          break;\n        case HintType.HIDDEN_PAIRS_BOX:\n          hintCounts.hiddenPairsBox++;\n          break;\n\n        case HintType.GUESS:\n          hintCounts.guesses++;\n          break;\n          \n        default:\n      } // switch\n    } // for hints in log\n    return hintCounts;\n  } // getHintCounts()\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/hint/hint-log.service.ts","// import { Injectable } from '@angular/core';\n\nimport { SudokuService } from '../model/sudoku.service';\n// import { Group } from '../model/sudoku.model';\nimport { Group } from '../model/sudoku.service';\nimport { Common } from '../common/common';\nimport { CombinationIterator } from '../common/combination.iterator';\nimport { NakedType }  from '../model/naked.type';\nimport { Difficulty }  from '../model/difficulty';\nimport { ActionType } from '../action/action';\nimport { Hint } from '../hint/hint';\nimport { ValueHint } from '../hint/hint';\nimport { CandidatesHint } from '../hint/hint';\nimport { HintType } from '../hint/hint.type';\nimport { HintLogService } from '../hint/hint-log.service';\nimport { HintCounts } from '../hint/hintCounts';\nimport { CANDIDATES } from '../common/common';\nimport { ROWS } from       '../common/common';\nimport { COLS } from       '../common/common';\nimport { BOXS } from       '../common/common';\nimport { CELLS } from      '../common/common';\nimport { ROW_CELLS } from  '../common/common';\nimport { COL_CELLS } from  '../common/common';\nimport { BOX_CELLS } from  '../common/common';\n\n/**\n * \n */\n\n// @Injectable()\nexport class HintService {\n\n  private activeHint: Hint;\n  private hintLog: HintLogService;\n  private sudokuService: SudokuService;\n\n  constructor(\n    // private sudokuService: SudokuService,\n    // private hintLog: HintLogService\n    sudokuService: SudokuService\n    ) {\n      this.hintLog = new HintLogService();\n      this.sudokuService = sudokuService;\n    }\n\n  public initializeHintLog() : void {\n    this.hintLog.initialize();\n  }\n\n  public addHintLogEntry(hint: Hint) : void {\n    this.hintLog.addEntry(hint);\n  }\n\n  public getHintCounts() : HintCounts {\n    return this.hintLog.getHintCounts();\n  }\n\n  public getActiveHint() {\n    return this.activeHint;\n  }\n\n  /**\n   * Check for any hints at this state of the sudoku solution progress. If\n   * maxDifficulty is set to EASY only the easy solution techniques will be\n   * sought for a hint. Similarly for MEDIUM and HARD.\n   */\n  public getHint(maxDifficulty : Difficulty) : Hint {\n    this.activeHint = undefined;\n    \n    // first, easy techniques\n    if (   this.checkNakedSingles()\n        || this.checkHiddenSingles()) {\n      return this.activeHint;\n    }\n    if (maxDifficulty === Difficulty.EASY) {\n      return undefined;  // no hints using easy techniques\n    }\n\n    // next, medium techniques\n    if (   this.checkNakedPairs()\n        || this.checkPointingRowCol()\n        || this.checkRowBoxReductions()\n        || this.checkColBoxReductions()) {\n      return this.activeHint;\n    }\n    if (maxDifficulty === Difficulty.MEDIUM) {\n      return undefined;  // no hints using easy and medium techniques\n    }\n\n    // finally, hard techniques\n    if (   this.checkNakedTriples()\n        || this.checkNakedQuads()\n        || this.checkHiddenPairs()\n        || this.checkHiddenTriples()\n        // || this.checkHiddenQuads()\n        ) {\n      return this.activeHint;\n    }\n    return undefined;  // no hints using any techniques without guessing\n  } // getHint()\n\n  /**\n   * Apply hint toward solution.\n   */\n  public applyHint() : void {\n    // let args = hint.removals;\n    if (this.activeHint == undefined) {\n      return;   // no hunt to apply\n    }\n    this.hintLog.addEntry(this.activeHint);\n\n    // switch (hint.action) {\n    switch (this.activeHint.type) {\n      case HintType.NAKED_SINGLE:\n      case HintType.HIDDEN_SINGLE_ROW:\n      case HintType.HIDDEN_SINGLE_COL:\n      case HintType.HIDDEN_SINGLE_BOX:\n        let vHint: ValueHint = <ValueHint> this.activeHint;\n        this.sudokuService.setValue(vHint.cell, vHint.value, ActionType.SET_VALUE, undefined, \n            vHint);\n        break;\n      default:\n        let kHint: CandidatesHint = <CandidatesHint> this.activeHint;\n        let removals = kHint.removals;\n        for (let removal of removals) {\n          this.sudokuService.removeCandidate(removal.c, removal.k, kHint);\n        }\n    } // switch\n    this.activeHint = undefined;\n  } // applyHint()\n\n  /**\n   * Apply hint toward solution.\n   */\n  private applyGivenHint(hint: Hint) : void {\n    if (hint == undefined) {\n      return;   // no hunt to apply\n    }\n    this.hintLog.addEntry(hint);\n\n    // switch (hint.action) {\n    switch (hint.type) {\n      case HintType.NAKED_SINGLE:\n      case HintType.HIDDEN_SINGLE_ROW:\n      case HintType.HIDDEN_SINGLE_COL:\n      case HintType.HIDDEN_SINGLE_BOX:\n        let vHint: ValueHint = <ValueHint> hint;\n        this.sudokuService.setValue(vHint.cell, vHint.value, ActionType.SET_VALUE, undefined, \n            vHint);\n        break;\n      default:\n        let kHint: CandidatesHint = <CandidatesHint> hint;\n        let removals = kHint.removals;\n        for (let removal of removals) {\n          this.sudokuService.removeCandidate(removal.c, removal.k, kHint);\n        }\n    } // switch\n    hint = undefined;\n  } // applyHint()\n\n  /**\n   * Randomly look for cells with a single candidate. If found, create a hint\n   * and return true. If none found, return false.\n   */\n  private checkNakedSingles() : boolean {\n    for (let c of Common.shuffleArray(CELLS.slice())) {\n      let nakedCells: number[] = \n          this.sudokuService.findNakedCandidates(c, NakedType.SINGLE);\n      if (nakedCells.length > 0) {\n        this.activeHint = new ValueHint(HintType.NAKED_SINGLE, c, nakedCells[0]);\n        return true;\n      }\n    } // next random cell\n    return false;\n  } // checkNakedSingles()\n\n  /**\n   * Check for hidden singles in rows, columns, and boxes. If found, create\n   * a hint and return true, otherwise return false.\n   */\n  private checkHiddenSingles() : boolean {\n    for (let r of ROWS) {\n      if (this.checkHiddenSinglesGroup(this.sudokuService.getRow(r), HintType.HIDDEN_SINGLE_ROW)) {\n        return true;\n      }\n    }\n    for (let c of COLS) {\n      if (this.checkHiddenSinglesGroup(this.sudokuService.getCol(c), HintType.HIDDEN_SINGLE_COL)) {\n        return true;\n      }\n    }\n    for (let b of BOXS) {\n      if (this.checkHiddenSinglesGroup(this.sudokuService.getBox(b), HintType.HIDDEN_SINGLE_BOX)) {\n        return true;\n      }\n    }\n    return false;\n  } // checkHiddenSingles()\n\n  /**\n   * Check for hidden singles in a group (row, column, or box). If found, \n   * create a hint and return true, otherwise return false. \n   */\n  private checkHiddenSinglesGroup(group: Group, hintType: HintType) : boolean {\n    let singleCell = -1;\n    NEXT_CANDIDATE:\n    for (let k of CANDIDATES) {\n      if (this.sudokuService.containsValue(group, k)) {\n        continue NEXT_CANDIDATE;  // candidate cannot be single\n      }\n      let kCountInGroup = 0;\n      for (let c of group.cells) {\n        if (this.sudokuService.isCandidate(c, k)) {\n          kCountInGroup++;\n          if (kCountInGroup > 1) {\n            continue NEXT_CANDIDATE;  // not single\n          }\n          singleCell = c;\n        }\n      } // for cells in group\n      if (kCountInGroup === 1) {  // candidate occurs once in group\n        this.activeHint = new ValueHint(hintType, singleCell, k);\n        return true;\n      }\n    } // for candidates\n    return false;\n  } // checkGroupHiddenSingles()\n        \n  /**\n   * Check for naked pairs in rows, columns, and boxes. If found, create a hint\n   * and return true, otherwise return false.\n   */\n  private checkNakedPairs() : boolean {\n      \n    // get array of cells with 2 and only 2 candidates\n    let nakedCells: {idx: number, cands: number[]}[] = [];\n    for (let c of CELLS) {\n      let nakedCands: number[] = \n          this.sudokuService.findNakedCandidates(c, NakedType.PAIR);\n      if (nakedCands.length > 0) {\n        nakedCells.push({idx: c, cands: nakedCands});\n      }\n    }\n    if (nakedCells.length == 0) {\n        return false;\n    }\n          \n    // find 2 cells that have same 2 candidates\n    for (let i1 = 0; i1 < nakedCells.length; i1++) {\n      for (let i2 = i1 + 1; i2 < nakedCells.length; i2++) {\n\n        let candidates: number[] = [];\n        candidates = nakedCells[i1].cands.slice();\n\n        // add unique candidates from nakedCells[i2].candidates\n        for (let i of nakedCells[i2].cands) {\n          if (candidates.indexOf(i) === -1) {\n            candidates.push(i);\n          }\n        }\n        if (candidates.length != 2) {\n          continue;   // must be 2 for naked pair\n        }\n\n        // see if cells with common candidates are in same group\n        let cells: number[] = [nakedCells[i1].idx, nakedCells[i2].idx]\n\n        // look for actions; if none, move on\n        if (Common.areCellsInSameRow(cells)) {\n          if (this.checkNakedsRemovals(ROW_CELLS[Common.rowIdx(cells[0])],\n              cells, candidates, HintType.NAKED_PAIRS_ROW)) {\n            return true;    \n          }\n        }\n        if (Common.areCellsInSameCol(cells)) {\n          if (this.checkNakedsRemovals(COL_CELLS[Common.colIdx(cells[0])],\n              cells, candidates, HintType.NAKED_PAIRS_COL)) {\n            return true;\n          }\n        }\n        if (Common.areCellsInSameBox(cells)) {\n          if (this.checkNakedsRemovals(BOX_CELLS[Common.boxIdx(cells[0])],\n              cells, candidates, HintType.NAKED_PAIRS_BOX)) {\n            return true;\n          }\n        }\n\n      } // for i2\n    } // for i1\n    return false;\n  } // checkNakedPairs()\n\n  /**\n   * Check for naked triples in rows, columns, and boxes. If found, create a \n   * hint and return true, otherwise return false. A group must have at least \n   * 5 open cells to allow a naked triple.\n   */\n  private checkNakedTriples() : boolean {\n\n    // get array of cells with 2 or 3 candidates\n    let nakedCells: {idx: number, cands: number[]}[] = [];\n    for (let c of CELLS) {\n      let nakedCands: number[] = \n          this.sudokuService.findNakedCandidates(c, NakedType.TRIPLE);\n      if (nakedCands.length > 0) {\n        nakedCells.push({idx: c, cands: nakedCands});\n      }\n    }\n    if (nakedCells.length == 0) {\n        return false;\n    }\n\n    // find 3 cells that have same 2 or 3 candidates\n    for (let i1 = 0; i1 < nakedCells.length; i1++) {\n      for (let i2 = i1 + 1; i2 < nakedCells.length; i2++) {\n        for (let i3 = i2 + 1; i3 < nakedCells.length; i3++) {\n\n          let candidates: number[] = [];\n          candidates = nakedCells[i1].cands.slice();\n\n          // add unique candidates from nakedCells[i2].candidates\n          for (let i of nakedCells[i2].cands) {\n            if (candidates.indexOf(i) === -1) {\n              candidates.push(i);\n            }\n          }\n          if (candidates.length > 3) {\n            continue;   // must be 3 for naked triple\n          }\n\n          // add unique candidates from nakedCells[i3].candidates\n          for (let i of nakedCells[i3].cands) {\n            if (candidates.indexOf(i) === -1) {\n              candidates.push(i);\n            }\n          }\n          if (candidates.length != 3) {\n            continue;   // must be 3 for naked triple\n          }\n\n          // see if cells with common candidates are in same group\n          let cells: number[] = [nakedCells[i1].idx, \n              nakedCells[i2].idx, nakedCells[i3].idx]\n\n          // look for actions; if none, move on\n          if (Common.areCellsInSameRow(cells)) {\n            if (this.checkNakedsRemovals(ROW_CELLS[Common.rowIdx(cells[0])],\n                cells, candidates, HintType.NAKED_TRIPLES_ROW)) {\n              return true;    \n            }\n          }\n          if (Common.areCellsInSameCol(cells)) {\n            if (this.checkNakedsRemovals(COL_CELLS[Common.colIdx(cells[0])],\n                cells, candidates, HintType.NAKED_TRIPLES_COL)) {\n              return true;\n            }\n          }\n          if (Common.areCellsInSameBox(cells)) {\n            if (this.checkNakedsRemovals(BOX_CELLS[Common.boxIdx(cells[0])],\n                cells, candidates, HintType.NAKED_TRIPLES_BOX)) {\n              return true;\n            }\n          }\n\n        } // for i3\n      } // for i2\n    } // for i1\n    return false;\n  } // checkNakedTriples()\n\n  /**\n   * TODO\n   * Check for naked pairs, triples, or quads in a group (row, column, or box). \n   * If found, create a \n   * hint and return true, otherwise return false. A group must have  \n   * 5 or more open (4 or fewer closed) cells to allow a naked triple. \n   * \n   * If only 4 open cells then 5 value\n   * cells means only 4 candidates in group. A naked triple takes 3 cells,\n   * therefore the 4th cell must be a naked single which would have been \n   * already found.\n   */\n  private checkNakedPairsGroup(group: Group, hintType: HintType) : boolean {\n    if (this.sudokuService.candidateCellsCount(group) >= 4) {\n      return false;   // see method comment \n    }\n    // TODO\n    return false;\n  }\n\n  private checkNakedTriplesGroup(group: Group, hintType: HintType) : boolean {\n    if (this.sudokuService.candidateCellsCount(group) >= 5) {\n      return false;   // see method comment \n    }\n    // TODO\n    return false;\n  }\n\n  private checkNakedQuadsGroup(group: Group, hintType: HintType) : boolean {\n    if (this.sudokuService.candidateCellsCount(group) >= 6) {\n      return false;   // see method comment \n    }\n    // TODO\n    return false;\n  }\n\n  /*\n  private checkNakedXXXXsGroup(group: Group, hintType: HintType) : boolean {\n    if (this.sudokuService.candidateCellsCount(group) >= 5) {\n      return false;   // see method comment \n    }\n\n    // approach 1 TODO\n    // find cells in group with 2 or 3 (<= 3) cands -- cells23 [a, b, c, d, ...]\n    // must have at least 3 cells (may be 3, 4, 5, 6, 7, 8, or 9)\n    // for cells23, get cands cells23Cands [i, j, k, l, ...]\n\n    // get group cells 2 or 3 candidates; \n    // there can't be any with 1 which would be naked single\n\n    // let cells = []; // cells with 2-3 candidates\n    // for (let c of group.groupCells) {\n    //   let cell = this.cells[c];\n    //   if (!cell.hasValue() && cell.getNumberOfCandidates() <= 3) {\n    //     cells.push(cell);\n    //   }\n    // }\n    // if (cells.length < 3) {\n    //   return false;   // need at least 3 for naked triple\n    // }\n\n    let nakedCells: [{ c: number, ks: number[] }];\n    for (let c of group.groupCells) {\n      let cands = this.cells[c].getCandidates()\n      if (cands.length <= 3) {\n        nakedCells.push({c: c, ks: cands});\n      }\n    }\n    if (nakedCells.length < 3) {\n      return false;   // need at least 3 for naked triple\n    }\n\n    // does a combo of cells have only 3 cands?\n    let it = new CombinationIterator(nakedCells, 3);\n    let cands: number[] = [];\n    while (it.hasNext()) {\n      let combination = it.next();\n      for (let c of combination) {\n        for (let k of c.ks) {\n          if (cands.indexOf(k) == -1) {\n            cands.push(k);\n          }\n        }\n      }\n      if (cands.length == 3) {\n        // 3 cells w/3 cands\n        // check for removals\n      }\n    }\n\n\n\n    // get candidates that appear in cells with 2-3 candidates\n    // let cands = [];\n    // for (let cell of nakedCells) {\n    //   for (let k of cell.getCandiates()) {\n    //     if (cands.indexOf(k) == -1) {\n    //       cands.push(k);\n    //     }\n    //   }\n    // }\n\n    // check for 3 cell combinations\n\n    // approach 2\n    // find cands in group occurring 2 or 3 (<= 3) times -- cands23 [k1, k2, k3, k4, ... ]\n    // must have at least 3 cands\n\n    return false\n  } // checkNakedTriplesGroup()\n  */\n\n  /**\n   * Check for naked triples in rows, columns, and boxes. If found, create a hint\n   * and return true, otherwise return false.\n   */\n  private checkNakedQuads() : boolean {\n\n    // get array of cells with 2, 3, or 4 candidates\n    let nakedCells: {idx: number, cands: number[]}[] = [];\n    for (let c of CELLS) {\n      let nakedCands: number[] = \n          this.sudokuService.findNakedCandidates(c, NakedType.QUAD);\n      if (nakedCands.length > 0) {\n        nakedCells.push({idx: c, cands: nakedCands});\n      }\n    }\n    if (nakedCells.length == 0) {\n        return false;\n    }\n\n    // find 4 cells that have same 2, 3, or 4 candidates\n    for (let i1 = 0; i1 < nakedCells.length; i1++) {\n      for (let i2 = i1 + 1; i2 < nakedCells.length; i2++) {\n        for (let i3 = i2 + 1; i3 < nakedCells.length; i3++) {\n          for (let i4 = i3 + 1; i4 < nakedCells.length; i4++) {\n\n            let candidates: number[] = [];\n            candidates = nakedCells[i1].cands.slice();\n\n            // add unique candidates from nakedCells[i2].cands\n            for (let i of nakedCells[i2].cands) {\n              if (candidates.indexOf(i) === -1) {\n                candidates.push(i);\n              }\n            }\n            if (candidates.length > 4) {\n              continue;   // must be 4 for naked quad\n            }\n\n            // add unique candidates from nakedCells[i3].cands\n            for (let i of nakedCells[i3].cands) {\n              if (candidates.indexOf(i) === -1) {\n                candidates.push(i);\n              }\n            }\n            if (candidates.length > 4) {\n              continue;   // must be 4 for naked quad\n            }\n\n            // add unique candidates from nakedCells[i4].cands\n            for (let i of nakedCells[i4].cands) {\n              if (candidates.indexOf(i) === -1) {\n                candidates.push(i);\n              }\n            }\n            if (candidates.length != 4) {\n              continue;   // must be 4 for naked quad\n            }\n\n            // see if cells with common candidates are in same group\n            let cells: number[] = [nakedCells[i1].idx, \n                nakedCells[i2].idx, nakedCells[i3].idx, nakedCells[i4].idx]\n\n            // look for actions; if none, move on\n            if (Common.areCellsInSameRow(cells)) {\n              if (this.checkNakedsRemovals(ROW_CELLS[Common.rowIdx(cells[0])],\n                  cells, candidates, HintType.NAKED_QUADS_ROW)) {\n                return true;    \n              }\n            }\n            if (Common.areCellsInSameCol(cells)) {\n              if (this.checkNakedsRemovals(COL_CELLS[Common.colIdx(cells[0])],\n                  cells, candidates, HintType.NAKED_QUADS_COL)) {\n                return true;\n              }\n            }\n            if (Common.areCellsInSameBox(cells)) {\n              if (this.checkNakedsRemovals(BOX_CELLS[Common.boxIdx(cells[0])],\n                  cells, candidates, HintType.NAKED_QUADS_BOX)) {\n                return true;\n              }\n            }\n\n          } // for i4\n        } // for i3\n      } // for i2\n    } // for i1\n    return false;\n  } // checkNakedQuads()\n\n  /**\n   * Having cells with common candidates and common group, determine if\n   * candidate removals are possible. If so, lodge a hint and return true.\n   * Return false to signal that no removal action is possible.\n   */\n  private checkNakedsRemovals(groupCells: number[], cells: number[], \n      candidates: number[], hintType: HintType) : boolean {\n\n    // look for removals\n    let removals: {c: number, k: number}[] = [];\n\n    for (let c of groupCells) {\n      if (this.sudokuService.hasValue(c) || cells.indexOf(c) > -1) {\n        continue;\n      }\n      for (let k of candidates) {\n        if (this.sudokuService.isCandidate(c, k)) {\n            removals.push({c: c, k: k});\n        }\n      } // for k\n    } // for c\n\n    // return true and hint if there are actions\n    if (removals.length > 0) {\n      this.activeHint = new CandidatesHint(hintType, cells, candidates, removals);\n      return true;\n    }\n    return false;\n  } // checkNakedsRemovals()\n\n  /**\n   * Check for hidden pairs in rows, columns, and boxes. If found, create a hint\n   * and return true, otherwise return false.\n   * \n   * A hidden pair occurs when a pair of numbers appears in exactly two \n   * squares in a row, column, or box, but those two numbers aren't \n   * the only ones in their squares.\n   * \n   * http://www.thonky.com/sudoku/hidden-pairs-triples-quads/\n   */\n  private checkHiddenPairs() : boolean {\n    for (let r of ROWS) {\n      if (this.checkHiddenPairsGroup(this.sudokuService.getRow(r), HintType.HIDDEN_PAIRS_ROW)) {\n        return true;\n      }\n    }\n    for (let c of COLS) {\n      if (this.checkHiddenPairsGroup(this.sudokuService.getCol(c), HintType.HIDDEN_PAIRS_COL)) {\n        return true;\n      }\n    }\n    for (let b of BOXS) {\n      if (this.checkHiddenPairsGroup(this.sudokuService.getBox(b), HintType.HIDDEN_PAIRS_BOX)) {\n        return true;\n      }\n    }\n    return false;\n  } // checkHiddenPairs()\n\n  /**\n   * Check for hidden triples in rows, columns, and boxes. If found, create a hint\n   * and return true, otherwise return false.\n   * \n   * A hidden triple occurs when three cells in a row, column, or box \n   * contain the same three numbers, or a subset of those three. The \n   * three cells also contain other candidates.\n   * \n   * http://www.thonky.com/sudoku/hidden-pairs-triples-quads/\n   */\n  private checkHiddenTriples() : boolean {\n    for (let r of ROWS) {\n      if (this.checkHiddenTriplesGroup(this.sudokuService.getRow(r), HintType.HIDDEN_TRIPLES_ROW)) {\n        return true;\n      }\n    }\n    for (let c of COLS) {\n      if (this.checkHiddenTriplesGroup(this.sudokuService.getCol(c), HintType.HIDDEN_TRIPLES_COL)) {\n        return true;\n      }\n    }\n    for (let b of BOXS) {\n      if (this.checkHiddenTriplesGroup(this.sudokuService.getBox(b), HintType.HIDDEN_TRIPLES_BOX)) {\n        return true;\n      }\n    }\n    return false;\n  } // checkHiddenTriples()\n\n  /**\n   * Check for hidden triples in rows, columns, and boxes. If found, create a hint\n   * and return true, otherwise return false.\n   * \n   * Hidden quads are pretty rare, and they can be difficult to spot \n   * unless you are specifically looking for them.\n   * \n   * http://www.thonky.com/sudoku/hidden-pairs-triples-quads/\n   */\n  private checkHiddenQuads() : boolean {\n    for (let r of ROWS) {\n      if (this.checkHiddenQuadsGroup(this.sudokuService.getRow(r), \n          HintType.HIDDEN_QUADS_ROW)) {\n        return true;\n      }\n    }\n    for (let c of COLS) {\n      if (this.checkHiddenQuadsGroup(this.sudokuService.getCol(c), \n          HintType.HIDDEN_QUADS_COL)) {\n        return true;\n      }\n    }\n    for (let b of BOXS) {\n      if (this.checkHiddenQuadsGroup(this.sudokuService.getBox(b), \n          HintType.HIDDEN_QUADS_BOX)) {\n        return true;\n      }\n    }\n    return false;\n  } // checkHiddenTriples()\n\n  /**\n   * Check for hidden pairs in a given row, column, or box.\n   * \n   * (1) Candidates that appear exactly 2 times in group, and\n   * (2) 2 times appearing candidates are confined to 2 cells, and,\n   * as usual, there are candidate removal actions available.\n   */\n  private checkHiddenPairsGroup(group: Group, hintType: HintType) : boolean {\n\n    // number of occurrences of each candidate in group\n    let kCounts: number[] = [];\n\n    // candidates occurring no more than 3 times in group\n    let pairCandidates: number[] = [];   \n\n    // group cells containing a triple candidate\n    let pairCells: number[] = [];\n\n    // look for 2 candidates occurring 2 times in group\n    kCounts = this.sudokuService.getCandidateCounts(group);\n    for (let k of CANDIDATES) {\n      if (kCounts[k] === 2) {\n        pairCandidates.push(k);\n      }\n    }\n    if (pairCandidates.length < 2) {\n      return false;   // no 2 candidates appear 2 times in group\n    }\n\n    // find group cells that contain potential pair candidate\n    NEXT_CELL:\n    for (let c of group.cells) {\n      for (let k of pairCandidates) {\n        if (this.sudokuService.isCandidate(c, k)) {\n          pairCells.push(c);\n          continue NEXT_CELL;   // only push cell once\n        }\n      }\n    }\n\n    // examine all combinations of 2 pair cells containing pair candidates\n    let pairCellCombinations: number[][] = Common.pairwise(pairCells);\n    for (let pairCellCombination of pairCellCombinations) {\n\n      // this set of pair cells\n      let _2pairCells: number[] = pairCellCombination;\n\n      // candidates in 1 or more of these set of cells\n      let _2cands: number[] = [];\n\n      // number of occurrences of each candidate in this set of cells\n      let _2kCounts: number[] = [0,   0, 0, 0,   0, 0, 0,   0, 0, 0];\n\n      // cands in set of cells that match occurrences in full group\n      let _2matchedCands: number[] = [];\n\n      // get unique pair candidates from pair cells\n      for (let k of pairCandidates) {\n        for (let j = 0; j < 2; j++) {\n          if (this.sudokuService.isCandidate(_2pairCells[j], k)) {\n            _2kCounts[k]++;\n            if (_2cands.indexOf(k) === -1) {\n              _2cands.push(k);\n            }\n          }\n        }\n      }\n\n      // if not 2 candidates, try next combination of pair cells \n      if (_2cands.length < 2) {\n        continue;  // next combination of pair cells\n      }\n\n      // make sure pair candidates don't appear outside pair cells\n      for (let k of _2cands) {\n        if (_2kCounts[k] == kCounts[k]) {\n          _2matchedCands.push(k);\n        }\n      }\n      if (_2matchedCands.length != 2) {\n        continue;  // next combination of pair cells\n      }\n\n      // look for removals: other candidates in pair cells\n      let removals: {c: number, k: number}[] = this.findHiddenRemovals(\n          pairCellCombination, _2matchedCands);\n\n      // need at least 1 candidate to remove or it's not hidden pair\n      if (removals.length > 0) {\n        this.activeHint = new CandidatesHint(hintType, pairCellCombination, \n            _2matchedCands, removals);\n        return true;\n      }\n          \n    } // for pairCellCombinations\n\n    return false;\n  } // checkHiddenPairsGroup()\n\n  /**\n   * Check for hidden triples in a given row, column, or box.\n   * \n   * (1) Candidates that appear exactly 2 or 3 times in group, and\n   * (2) 2 or 3 times appearing candidates are confined to 3 cells, and,\n   * as usual, there are candidate removal actions available.\n   */\n  private checkHiddenTriplesGroup(group: Group, hintType: HintType) : boolean {\n\n    // number of occurrences of each candidate in group\n    let kCounts: number[] = [];\n\n    // candidates occurring no more than 3 times in group\n    let tripCandidates: number[] = [];   \n\n    // group cells containing a triple candidate\n    let tripCells: number[] = [];\n\n    // look for at least 3 candidates occurring 2 or 3 times in group\n    kCounts = this.sudokuService.getCandidateCounts(group);\n    for (let k of CANDIDATES) {\n      if (kCounts[k] >= 2 && kCounts[k] <= 3) {\n        tripCandidates.push(k);\n      }\n    }\n    if (tripCandidates.length < 3) {\n      return false;   // no 3 candidates appear 2 or 3 times in group\n    }\n\n    // find group cells contain a potential triple candidate\n    NEXT_CELL:\n    for (let c of group.cells) {\n      for (let k of tripCandidates) {\n        if (this.sudokuService.isCandidate(c, k)) {\n          tripCells.push(c);\n          continue NEXT_CELL;   // only push cell once\n        }\n      }\n    }\n\n    // examine all combinations of 3 triple cells containing triple candidates\n    let tripCellCombinations: number[][] = Common.tripwise(tripCells);\n    for (let tripCellCombination of tripCellCombinations) {\n\n      // this set of triple cells\n      let _3tripCells: number[] = tripCellCombination;\n\n      // candidates in 1 or more of these set of cells\n      let _3cands: number[] = [];\n\n      // number of occurrences of each candidate in this set of cells\n      let _3kCounts: number[] = [0,   0, 0, 0,   0, 0, 0,   0, 0, 0];\n\n      // cands in set of cells that match occurrences in full group\n      let _3matchedCands: number[] = [];\n\n      // get unique triple candidates from triple cells\n      for (let k of tripCandidates) {\n        for (let j = 0; j < 3; j++) {\n          if (this.sudokuService.isCandidate(_3tripCells[j], k)) {\n            _3kCounts[k]++;\n            if (_3cands.indexOf(k) === -1) {\n              _3cands.push(k);\n            }\n          }\n        }\n      }\n\n      // if not at least 3 candidates, try next combination of triple cells \n      if (_3cands.length < 3) {\n        continue;  // next combination of triple cells\n      }\n\n      // make sure triple candidates don't appear outside triple cells\n      for (let k of _3cands) {\n        if (_3kCounts[k] == kCounts[k]) {\n          _3matchedCands.push(k);\n        }\n      }\n      if (_3matchedCands.length != 3) {\n        continue;  // next combination of triple cells\n      }\n\n      // look for removals: other candidates in triple cellsToValuesArray\n      let removals: {c: number, k: number}[] = this.findHiddenRemovals(\n          tripCellCombination, _3matchedCands);\n\n      // need at least 1 candidate to remove or it's not hidden triple\n      if (removals.length > 0) {\n        this.activeHint = new CandidatesHint(hintType, tripCellCombination, \n            _3matchedCands, removals);\n        return true;\n      }\n          \n    } // for tripCellCombinations\n\n    return false;\n  } // checkHiddenTriplesGroup()\n\n  /**\n   * Check for hidden quads in a given row, column, or box.\n   * \n   * (1) Candidates that appear exactly 2, 3, or 4 times in group, and\n   * (2) 2, 3, or 4 times appearing candidates are confined to 34 cells, and,\n   * as usual, there are candidate removal actions available.\n   */\n  private checkHiddenQuadsGroup(group: Group, hintType: HintType) : boolean {\n\n    // number of occurrences of each candidate in group\n    let kCounts: number[] = [];\n\n    // candidates occurring no more than 4 times in group\n    let quadCandidates: number[] = [];   \n\n    // group cells containing a quad candidate\n    let quadCells: number[] = [];\n\n    kCounts = this.sudokuService.getCandidateCounts(group);\n    for (let k of CANDIDATES) {\n      if (kCounts[k] >= 2 && kCounts[k] <= 4) {\n        quadCandidates.push(k);\n      }\n    }\n\n    console.log('kCounts       : ' + JSON.stringify(kCounts));            \n    console.log('quadCandidates: ' + JSON.stringify(quadCandidates) + ' (need at least 4)');            \n\n    // we need at least 4 candidates\n    if (quadCandidates.length < 4) {\n      return false;   // no 4 candidates appear 2, 3, or 4 times in group\n    }\n\n    // find group cells that contain a quad candidate\n    NEXT_CELL:\n    for (let c of group.cells) {\n      for (let k of quadCandidates) {\n        if (this.sudokuService.isCandidate(c, k)) {\n          quadCells.push(c);\n          continue NEXT_CELL;   // only push cell once\n        }\n      }\n    }\n\n    console.log('quadCells     : ' + JSON.stringify(quadCells));            \n\n    // examine all combinations of 4 quad cells containing quad candidates\n    let ln = quadCells.length\n    for (let     i1 = 0;      i1 < (ln - 3); i1++) {\n      for (let   i2 = i1 + 1; i2 < (ln - 2); i2++) {\n        for (let i3 = i2 + 1; i3 < (ln - 1); i3++) {\n          I4:\n          for (let i4 = i3 + 1; i4 < (ln - 0); i4++) {\n\n            // this set of quad cells\n            let _4quadCells = [quadCells[i1], quadCells[i2], quadCells[i3], quadCells[i4]];\n\n            // candidates in 1 or more of these set of cells\n            let _4cands: number[] = [];\n\n            // number of occurrences of each candidate in this set of cells\n            let _4kCounts: number[] = [0,   0, 0, 0,   0, 0, 0,   0, 0, 0];\n\n            // cands in set of cells that match occurrences in full group\n            let _4matchedCands: number[] = [];\n\n            // get unique quad candidates from quad cells\n            for (let k of quadCandidates) {\n              for (let i of [i1, i2, i3, i4]) {\n                if (this.sudokuService.isCandidate(quadCells[i], k)) {\n                  _4kCounts[k]++;\n                  if (_4cands.indexOf(k) === -1) {\n                    _4cands.push(k);\n                  }\n                }\n              }\n            }\n\n    console.log('_4quadCells   : ' + JSON.stringify(_4quadCells));            \n    console.log('_4cands       : ' + JSON.stringify(_4cands) + ' (need at least 4)');            \n\n            // make sure quad candidates don't appear outside quad cells -- NO!\n            // for (let k of cands) {\n            //   if (kCounts1[k] != kCounts[k]) {\n            //     continue I4;   // candidate k appears outside of quad cells\n            //   }\n            // }\n\n            // if not 4 candidates, try next combination of quad cells\n            // if (cands.length != 4) {\n            if (_4cands.length < 4) {\n              continue I4;\n            }\n\n            // let _4matchedCands: number[] = [];\n            for (let k of _4cands) {\n              if (_4kCounts[k] == kCounts[k]) {\n                _4matchedCands.push(k);\n              }\n            }\n\n    console.log('_4kCounts1    : ' + JSON.stringify(_4kCounts));            \n    console.log('_4matchedCands: ' + JSON.stringify(_4matchedCands) + ' (need exactly 4)');  \n\n            if (_4matchedCands.length != 4) {\n              continue I4;\n            }\n\n            // look for removals: other candidates in quad cellsToValuesArray\n            let removals: {c: number, k: number}[] = this.findHiddenRemovals(\n                [quadCells[i1], quadCells[i2], quadCells[i3], quadCells[i4]],\n                // quadCandidates);\n                _4matchedCands);\n\n    console.log('removals      : ' + removals.length + ' (need at least 1)');  \n\n            // no candidates to remove, so no hidden quad\n            if (removals.length > 0) {\n              this.activeHint = new CandidatesHint(hintType, \n                  [quadCells[i1], quadCells[i2], quadCells[i3], quadCells[i4]], \n                  _4matchedCands, removals);\n    console.log('hint: ' + JSON.stringify(this.activeHint));\n              return true;\n            }\n          \n          } // for i4\n        } // for i3\n      } // for i2\n    } // for i1\n    return false;\n  } // checkHiddenQuadsGroup()\n\n  /**\n   * Helper method to find candidate removals from hidden pairs, triples, quads.\n   */\n  private findHiddenRemovals(hiddenCells: number[], hiddenCands: number[]) \n      : {c: number, k: number}[] {\n    let removals: {c: number, k: number}[] = [];\n    for (let hiddenCell of hiddenCells) {\n      // let hiddenCellCands: number[] = this.cells[hiddenCell].getCandidates().slice();\n      let hiddenCellCands: number[] = this.sudokuService.getCandidates(hiddenCell).slice();\n      for (let hiddenCellCand of hiddenCellCands) {\n        if (hiddenCands.indexOf(hiddenCellCand) === -1) {\n          removals.push({c: hiddenCell, k: hiddenCellCand});\n        }\n      }\n    }\n    return removals;\n  } // findHiddenRemovals()\n\n  /**\n   * Check for pointing rows and columns. If found, create a hint and return \n   * true, otherwise return false.\n   * \n   * A pointing row (col) occurs when a candidate appears twice or three \n   * times in a box, and those occurrences are in the same row (col).\n   * This means the candidate MUST occur in one of the two or three cells \n   * in the box, and because of that, you can remove that candidate from \n   * any other cells in the same row (col) but outside the box.\n   * \n   * http://www.thonky.com/sudoku/pointing-pairs-triples/\n   */\n  private checkPointingRowCol() : boolean {\n    for (let b of BOXS) {\n  \n      CANDS:\t\t// within box, iterate over 9 candidate values\n      for (let k of CANDIDATES) {\n        let boxCandOccurrences: number[] = []; \t// [idx, ...]\n        if (this.sudokuService.containsValue(this.sudokuService.getBox(b), k)) {  \n          continue CANDS;\t// k cannot be candidate in box\n        }\n        for (let c of BOX_CELLS[b]) {   // for each cell in box\n          if (this.sudokuService.isCandidate(c, k)) {\n            boxCandOccurrences.push(c);\n            if (boxCandOccurrences.length > 3) {\n              continue CANDS;\t// too many for candidate\n            }\n          }\n        } // for\n        if (boxCandOccurrences.length < 2) {\n          continue CANDS;\t\t\t// too few for candidate\n        }\n        \n        // we have 2 or 3 occurances of k in b\n        // determine if in same row or col\n        let sameRow = Common.areCellsInSameRow(boxCandOccurrences);\n        let sameCol = Common.areCellsInSameCol(boxCandOccurrences);\n        if (!sameRow && !sameCol) {\n          continue CANDS;\t\t// try next candidate in box\n        }\n\n        // look for actions\n        let removals: {c: number, k: number}[] = [];\n        if (sameRow) {\n            \n          // scan other cells in row outside box\n          for (let c of ROW_CELLS[Common.rowIdx(boxCandOccurrences[0])]) {\n            if (Common.boxIdx(c) === b) {\n              continue; // cell in same box\n            }\n            if (this.sudokuService.isCandidate(c, k)) {\n              removals.push({c: c, k: k});\n            }\n          } // for\n\n          // if there are removals, we have hint\n          if (removals.length > 0) {\n            this.activeHint = new CandidatesHint(HintType.POINTING_ROW, \n                [boxCandOccurrences[0]], [k], removals);\n            return true;\n          }\n        } else {\t// same column\n            \n          // scan other cells in col outside box\n          for (let c of COL_CELLS[Common.colIdx(boxCandOccurrences[0])]) {\n            if (Common.boxIdx(c) === b) {\n              continue; // cell in same box\n            }\n            if (this.sudokuService.isCandidate(c, k)) {\n              removals.push({c: c, k: k});\n            }\n          } // for\n\n          // if there are removals, we have hint\n          if (removals.length > 0) {\n            this.activeHint = new CandidatesHint(HintType.POINTING_COL, \n                [boxCandOccurrences[0]], [k], removals);\n            return true;\n          }\n        } // else same col\n\n      } // for CANDS\n    } // for BOXS\n    return false;\n  } // checkPointingRowCol()\n\n  /*\n   * Check for row box reductions. If found, create a hint and return \n   * true, otherwise return false.\n   * \n   * In box/line reduction, two or three of the same candidate appear on \n   * the same row or column, and that candidate happens to be restricted \n   * to a single box. When this happens, you know that the candidate \n   * MUST occur in that row or column, so you can eliminate it from other \n   * cells in that box.\n   * \n   * http://www.thonky.com/sudoku/box-line-reduction/\n   */\n  private checkRowBoxReductions() : boolean {\n          \n    //ROWS:\n    for (let row of ROWS) {\n        \n      CANDS:\n      for (let k of CANDIDATES) {\n        if (this.sudokuService.containsValue(this.sudokuService.getRow(row), k)) {\n          continue CANDS;\t\t// not candidate in row\n        }\n        \n        let rowCandOccurrences: number[] = [];\n    \n        //CELLS:\n        for (let c of ROW_CELLS[row]) {\n          // if (this.cells[c].hasValue[k]) {   REDUNDANT\n          //   continue CELLS;\t// k cannot be candidate in col\n          // }\n          if (this.sudokuService.isCandidate(c, k)) {\n            rowCandOccurrences.push(c);\n            if (rowCandOccurrences.length > 3) {\n              continue CANDS;\t// too many for candidate\n            }\n          }\n        } // for CELLS\n        \n        if (rowCandOccurrences.length < 2) {\n          continue CANDS;\t\t\t// too few for candidate\n        }\n        \n        // determine if in same box\n        if (!Common.areCellsInSameBox(rowCandOccurrences)) {\n          continue CANDS;   // not in same box, next cand\n        }\n        \n        // must be same box, different row; look for removals\n        let removals: {c: number, k: number}[] = [];\n\n        // look for k's in other rows in box \n        // this row is row, this box is box\n        for (let c of BOX_CELLS[Common.boxIdx(rowCandOccurrences[0])]) {\n\n          // if c in row, continue next c\n          if (ROW_CELLS[row].indexOf(c) >= 0) {\n            continue;   // box cell in same row, next c\n          }\n\n          // if isCandidate, push to removals\n          if (this.sudokuService.isCandidate(c, k)) {\n            removals.push({c: c, k: k});\n          }\n        } // for\n        if (removals.length > 0) {\n          this.activeHint = new CandidatesHint(HintType.ROW_BOX_REDUCTION, \n              [rowCandOccurrences[0]], [k], removals);\n          return true;\n        }\n      } // for CANDS\n    } // for ROWS\n    return false;    \t\n  } // checkRowBoxReductions()\n\n  /**\n   * Check for column box reductions. If found, create a hint and return \n   * true, otherwise return false.\n   */\n  private checkColBoxReductions() : boolean {\n          \n    //COLS:\n    for (let col of COLS) {\n        \n      CANDS:\n      for (let k of CANDIDATES) {\n        // if (this.cols[col].containsValue(k)) {\n        if (this.sudokuService.containsValue(this.sudokuService.getCol(col), k)) {\n          continue CANDS;\t\t// not candidate in col\n        }\n        \n        let colCandOccurrences: number[] = [];\n\n        //CELLS:\n        for (let c of COL_CELLS[col]) {\n          // if (this.cells[c].hasValue[k]) {   REDUNDANT!\n          //   continue CELLS;\t// k cannot be candidate in row\n          // }\n          if (this.sudokuService.isCandidate(c, k)) {\n            colCandOccurrences.push(c);\n            if (colCandOccurrences.length > 3) {\n              continue CANDS;\t// too many for candidate\n            }\n          }\n        } // for CELLS\n        \n        if (colCandOccurrences.length < 2) {\n            continue CANDS;\t\t\t// too few for candidate\n        }\n        \n        // determine if in same box\n        if (!Common.areCellsInSameBox(colCandOccurrences)) {\n          continue CANDS;   // not in same box, next cand\n        }\n        \n        // must be same box, different col; look for removals\n        let removals: {c: number, k: number}[] = [];\n\n        // look for k's in other cols in box\n        // this col is col, this box is box\n        for (let c of BOX_CELLS[Common.boxIdx(colCandOccurrences[0])]) {\n\n          // if c in col, continue next c\n          if (COL_CELLS[col].indexOf(c) >= 0) {\n            continue;   // box cell in same col, next c\n          }\n\n          // if isCandidate, push to removals\n          if (this.sudokuService.isCandidate(c, k)) {\n            removals.push({c: c, k: k});\n          }\n        } // for\n        if (removals.length > 0) {\n          this.activeHint = new CandidatesHint(HintType.COL_BOX_REDUCTION, \n              [colCandOccurrences[0]], [k], removals);\n          return true;\n        }\n      } // for CANDS\n    } // for COLS\n    return false;    \t\n  } // checkColBoxReductions()\n        \n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/hint/hint.service.ts","import { Puzzle } from './puzzle';\nimport { NakedType } from './naked.type';\n\nimport { Action,\n         GuessAction,\n         ActionType,\n         RemoveAction,\n         ValueAction } from '../action/action';\n\nimport { ActionLogService } from '../action/action-log.service';\n\nimport { ValueHint,\n         CandidatesHint } from '../hint/hint';\n\nimport { Common,\n         CELLS,\n         VALUES,\n         CANDIDATES,\n         GROUPS,\n         ROWS,\n         COLS,\n         BOXS,\n         ROW_CELLS,\n         COL_CELLS,\n         BOX_CELLS } from  '../common/common';\n\n/**\n * This service maintains the sudoku's state: essentially cell values and\n * cell candidates. This class's public methods provide the only access to\n * this state.\n * \n * This application runs (1) a user interface in the foreground (browser)\n * and (2) a web worker (background) that creates and caches sudokus. \n * Therefore there are two instances of this SudokuService: one to provide\n * the user interactive experience in solving a sudoku, and another instance\n * to be building sudokus in the background to be instantly available when \n * the user wants a new sudoku.\n */\nexport class SudokuService {\n\n  private currentSudoku: Puzzle = undefined;\n  private sudokuModel: SudokuModel = undefined;\n  private actionLog: ActionLogService = undefined;\n\n  /**\n   * Inject the data model and logs.\n   */\n  constructor(\n      // this.actionLog: ActionLogService,\n    actionLog: ActionLogService\n  ) {\n    this.sudokuModel = new SudokuModel();\n    // this.actionLog = new ActionLogService();\n    this.actionLog = actionLog;\n    this.initializeModel();\n  } // constructor()\n\n  /**\n   * Initialize the entire sudoku.\n   */\n  public initializeModel() : void {\n    for (let c of CELLS) {\n      this.initializeCell(this.sudokuModel.cells[c]);\n    }\n    for (let g of GROUPS) {\n      this.initializeGroup(this.sudokuModel.rows[g]);\n      this.initializeGroup(this.sudokuModel.cols[g]);\n      this.initializeGroup(this.sudokuModel.boxs[g]);\n    }\n    this.initializeActionLog();\n  } // initializeModel()\n\n  /**\n   * \n   */\n  public initializeActionLog() : void {\n    this.actionLog.initialize();\n  } // initializeActionLog()\n\n  /**\n   * \n   */\n  public getCurrentSudoku() : Puzzle {\n    return this.currentSudoku;\n  } // getCurrentSudoku()\n\n  /**\n   * Sets up a sudoku puzzle with a set of initial vallues. The initial values\n   * will be an array of 81 numbers each 0..9. A zero indicates a blank or\n   * empty cell. E.g.\n   * [0,0,2,4,0,0,1,0,3,9,1,0,3,0,0,0,6,0,0, ...]\n   */\n  public loadProvidedSudoku(givenValues: number[]) : Puzzle {\n    let puzzle = new Puzzle();\n    puzzle.initialValues = givenValues;\n    this.initializeModel();\n    for (let c of CELLS) {\n      let cell = this.sudokuModel.cells[c];   // cell at [c] in cells array\n      let givenValue = givenValues[c];             // givenValue at [c] in givenValues array\n      if (givenValue === 0) {\n        continue;\n      }\n\n      // set cell, update row/col/box, lock cell\n      this.setValue(c, givenValue, ActionType.SET_VALUE);\n      cell.locked = true;\n    } // for\n\n    this.initializeActionLog();\n    return puzzle;\n  } // loadProvidedSudoku()\n\n  /**\n   * Sets a given value in every cell and set all groups to complete.\n   */\n  public setAllValues(values: number[]) : void {\n    for (let c of CELLS) {    // c is 0..80\n      let cell = this.sudokuModel.cells[c];   // cell at [c] in cells array\n      cell.locked = false;\n      cell.value = values[c];   // value at [c] in values array\n      this.removeAllCellCandidates(c);\n    }\n    for (let g of GROUPS) {\n      for (let v of VALUES) {\n        this.sudokuModel.rows[g].vOccurrences[v] = 1;\n        this.sudokuModel.cols[g].vOccurrences[v] = 1;\n        this.sudokuModel.boxs[g].vOccurrences[v] = 1;\n      }\n    }\n  } // setAllValues()\n\n  /**\n   * \n   */\n  public isCellLocked(c: number) : boolean {\n    return this.sudokuModel.cells[c].locked;\n  } // isCellLocked()\n  \n  /**\n   * Return givenValue of cell. Zero means no givenValue;\n   */\n  public getValue(c: number) : number {\n    return this.sudokuModel.cells[c].value;\n  } // getValue()\n\n  /**\n   * Sets value of a cell to the given value. In the specified cell, all candidates\n   * are removed. The candidate, equal to the value being set, is removed from \n   * every cell that shares the row, column, and box of the given cell.\n   * \n   * If the cell is locked or already has the new value, no action will be \n   * taken. If the cell has some other value, that old value will be removed\n   * first. The new value will be removed as a candidate where it appears in \n   * the cell's row, column, and box.\n   * \n   * \n   * \n   * \n   * \n   * Set given givenValue in given cell.\n   * - will not affect a locked cell\n   * - if cell already has the new givenValue, nothing to do\n   * - if cell already has another givenValue, remove it first\n   * - set the new givenValue (also removes all candidates from cell)\n   * - update givenValues count in cell's row, column, and box\n   * - update givenValues used\n   * - *TODO* conflict in row, col, box ............. mark invalid\n   * - create and log action entry\n   * - remove this givenValue as candidate in related cells\n   * \n   * Called by\n   * - setValue_() user key press or right click (playComponent.ts) setCellValue())\n   * - applyHint()\n   * - undoAction() REMOVE_VALUE\n   * - generatePuzzle() step 2 (pare down)\n   * \n   * Undo notes\n   * - remove givenValue\n   * - restore old previous givenValue? Down thru a removeValue action?\n   * - update givenValues count in cell's row, column, and box\n   * - update givenValues used\n   * - conflict ................\n   * - restore candidates in cell\n   * - restore candidates in related CELLS\n   * - remove log entry, don't create new one\n   */     \n  public setValue(c: number, newValue: number, actionType: ActionType, \n      guessPossibles? : number[], hint?: ValueHint) : void {\n    let cell = this.sudokuModel.cells[c];\n    if (cell.locked) {\n      return;\t\t// can't change locked cell\n    }\n\n    // if cell has givenValue, remove it first\n    if (cell.value != 0) {\n      if (cell.value === newValue) {\n        return;\t// same as existing givenValue, nothing to do\n      }\n      this.removeValue(c);\n    }\n\n    // set new value, remove candidates\n    cell.value = newValue;   \n    this.removeAllCellCandidates(c);\n\n    // increment occurrences in groups\n    this.sudokuModel.rows[cell.row].vOccurrences[newValue]++;\n    this.sudokuModel.cols[cell.col].vOccurrences[newValue]++;\n    this.sudokuModel.boxs[cell.box].vOccurrences[newValue]++;\n\n    // log action\n    let action: ValueAction;\n    switch (actionType) {\n      case ActionType.SET_VALUE:\n        action = new ValueAction(ActionType.SET_VALUE, c, newValue, hint);\n        break;\n      case ActionType.GUESS_VALUE:\n        action = new GuessAction(ActionType.GUESS_VALUE, c, newValue,\n            guessPossibles, hint);\n        break;\n    } // switch\n    this.actionLog.addEntry(action);\n\n    // remove candidate (this new value) from related cells\n    for (let rc of Common.getRelatedCells(c)) {\n      if (this.sudokuModel.cells[rc].value != 0) {\n        continue;\n      }\n      this.sudokuModel.cells[rc].candidates[newValue] = false;\n    }            \n  } // setValue()\n\n  /**\n   * Removes the givenValue of the specified cell to make it empty. This \n   * function also reestablishes appropriate candidates in the cell and\n   * reestablishes the candidate, equal to the givenValue being removed, in\n   * other cells in the same row, column, and box of the given cell. For\n   * every cell the candidate is only restored if there is no conflict\n   * with its row, column, and box.\n   * \n   * Remove givenValue from given cell.\n   * - will not affect a locked cell\n   * - if cell does not have a givenValue, nothing to do\n   * - remove old givenValue\n   * - update givenValues count in cell's row, column, and box\n   * - update givenValues used\n   * - create and log action entry\n   * - add applicable candidates to cell\n   * - add candidate (this cell's old givenValue) to related cells\n   * \n   * Called by\n   * - removeValue_() user key press (playComponent.ts) removeCellValue())\n   * - undoAction() SET_VALUE\n   * - setValue() (remove existing givenValue)\n   * - generatePuzzle() step 2 (pare down)\n   * \n   * Undo notes\n   * - replace prior givenValue\n   * - update givenValues count in cell's row, column, and box\n   * - update givenValues used\n   * - remove candidats from cell\n   * - remove this prior givenValue as candidate in related cells\n   * - remove log entry, don't create new one'\n   * \n   * - conflict ................\n   */\n  public removeValue(c: number) : void {\n\n    let cell = this.sudokuModel.cells[c];\n    \n    // cannot change locked cell\n    if (cell.locked) {\n      return;\n    }\n\n    // get existing givenValue, exit if no existing givenValue\n    let oldValue = cell.value;\n    if (oldValue === 0) {\n      return;\t\t\t// nothing to remove\n    }\n\n    cell.value = 0;\n    let row = this.sudokuModel.rows[cell.row];\n    let col = this.sudokuModel.cols[cell.col];\n    let box = this.sudokuModel.boxs[cell.box];\n    row.vOccurrences[oldValue]--;\n    col.vOccurrences[oldValue]--;\n    box.vOccurrences[oldValue]--;\n\n    // add applicable candidates to cell\n    for (let v of VALUES) {\n      if (   row.vOccurrences[oldValue] > 0\n          || col.vOccurrences[oldValue] > 0\n          || box.vOccurrences[oldValue] > 0) {\n        continue;\n      }\n      this.addCandidate(c, v);\n    }\n\n    // add candidate (this cell's old givenValue) to related cells\n    for (let rc of Common.getRelatedCells(c)) {\n      let relatedCell = this.sudokuModel.cells[rc];\n      let rcRow = this.sudokuModel.rows[relatedCell.row];\n      let rcCol = this.sudokuModel.cols[relatedCell.col];\n      let rcBox = this.sudokuModel.boxs[relatedCell.box];\n      if (   rcRow.vOccurrences[oldValue] > 0\n          || rcCol.vOccurrences[oldValue] > 0\n          || rcBox.vOccurrences[oldValue] > 0) {\n        continue;\n      }\n      this.addCandidate(rc, oldValue);\n    }\n  } // removeValue()\n\n  /**\n   * Remove given candidate from given cell. This method is only\n   * used for explicit independent candidate removal. \n   * \n   * THIS METHOD SHOULD NOT BE USED FOR IMPLICIT CANDIDATE REMOVALS RESULTING \n   * FROM SETTING CELL VALUES.\n   * \n   * - cannot remove last remaining cell candidate\n   * - remove candidate\n   * - create and log action entry\n   * \n   * Called by\n   * - removeCandidate_() user double click (playComponent.ts) removeCandidate())\n   * - applyHint()\n   * \n   * Undo notes\n   * - restore the candidate\n   * - remove log entry, don't create new one\n   */\n  public removeCandidate(c: number, k: number, hint: CandidatesHint) : void {\n    this.sudokuModel.cells[c].candidates[k] = false;\n    let action = new RemoveAction(ActionType.REMOVE_CANDIDATE, c, k, hint);\n    this.actionLog.addEntry(action);\n  } // removeCandidate()\n\n  /**\n   * Undoes the last logged action. If the last action resulted from a complex\n   * hint that caused multiple candidate removals e.g. nakedPairs, etc.\n   * - should not have deal with und0 REMOVE_VALUE\n   * - only undo SET_VALUE and REMOVE_CANDIDATE\n   * \n   * Called by:\n   * - user button press (playComponent.ts) undoLastAction())\n   * - rollbackRound()\n   * - rollbackAllRounds()\n   * \n   * Undo notes - set value\n   * - remove value\n   * - restore old previous value? Down thru a removeValue action?\n   * - update values count in cell's row, column, and box\n   * - update values used\n   * - conflict ................\n   * - restore candidates in cell\n   * - restore candidates in related CELLS\n   * - remove log entry, don't create new one\n   * \n   * Undo notes - remove value\n   * - replace prior value\n   * - update values count in cell's row, column, and box\n   * - update values used\n   * - remove candidats from cell\n   * - remove this prior value as candidate in related cells\n   * - remove log entry, don't create new one\n   * \n   * Undo notes - remove candidate\n   * - restore the candidate\n   * - remove log entry, don't create new one\n   */\n  public undoAction(action: Action) : void {\n    let actionType = action.type;\n    switch (actionType) {\n      case (ActionType.SET_VALUE):\n      case (ActionType.GUESS_VALUE):\n        this.removeValue(action.cell);\n        break;\n      case (ActionType.REMOVE_CANDIDATE):\n        this.addCandidate(action.cell, (<RemoveAction> action).candidate);\n    }\n  } // undoAction()\n\n  /**\n   * Returns an array of cell's candidates where the number of candidates is\n   * is greater than 0 but less than or equal to the number specified by the\n   * naked type. For NakedType.SINGLE, PAIR, TRIPLE, QUAD the number of \n   * candidates in the array are 1, 1..2, 1..3, and 1..4.\n   */\n  public findNakedCandidates(c: number, nakedType: NakedType) : number[] {\n    let maxCandidates = 0;\n    switch (nakedType) {\n      case NakedType.SINGLE:\n        maxCandidates = 1;\n        break;\n      case NakedType.PAIR:\n        maxCandidates = 2;\n        break;\n      case NakedType.TRIPLE:\n        maxCandidates = 3;\n        break;\n      case NakedType.QUAD:\n        maxCandidates = 4;\n    }\n    let nakeds: number[] = [];\n    if (this.hasValue(c)) {   // no candidates in cell\n      return [];\n    }\n    for (let k of CANDIDATES) {\n      if (this.isCandidate(c, k)) {\n        nakeds.push(k);\n        if (nakeds.length > maxCandidates) {\n          return [];  // to many k's in this cell\n        }\n      }\n    } // next k\n    return nakeds;  // cell has maxCandidates or fewer\n  } // findNakedCandidates()\n    \n  /**\n   * Determines if sudoku is fully solved. If every row's every value is used\n   * once and only once, the sudoku is completely solved.\n   */\n  public isSolved() : boolean {\n    for (let r of ROWS) {\n      for (let v of VALUES) {\n        if (this.sudokuModel.rows[r].vOccurrences[v] != 1) {\n          return false;\n        }\n      }\n    }\n    return true;\n  } // isSolved()\n\n  /**\n   * Returns true if cell has a value;\n   */\n  public hasValue(c: number) : boolean {\n    return this.sudokuModel.cells[c].value > 0; \n  } // hasValue()\n\n  /**\n   * \n   */\n  public getRow(r: number) : Group {\n    return this.sudokuModel.rows[r];\n  } // getRow()\n\n  /**\n   * \n   */\n  public getCol(c: number) : Group {\n    return this.sudokuModel.cols[c];\n  } // getCol()\n\n  /**\n   * \n   */\n  public getBox(b: number) : Group {\n    return this.sudokuModel.boxs[b];\n  } // getBox()\n\n  /**\n   * Returns true if cell has a value;\n   */\n  public containsValue(group: Group, v: number) : boolean {\n    return group.vOccurrences[v] === 1;\n  } // groupContainsValue()\n\n  /**\n   * Return the number of cells in the group that do not have a value. That is \n   * cells that are open or not filled. A candidate cell cannot have a value.\n   * cannot have any candidates. Within a group (row, column, or box),\n   * value cells + candidate cells = 9.\n   */\n  public candidateCellsCount(group: Group) : number {\n    let count = 0;\n    for (let v of VALUES) {\n      if (group.vOccurrences[v] === 0) {\n        count++;\n      }\n    }\n    return count;\n  } // candidateCellsCount()\n\n  /**\n   * Count the occurrences of each candidate in a group (row, column, or box).\n   * Return an array of the counts. The array is 10 numbers each element\n   * being the count of the corresponding candidate. The zero-th element is\n   * not used. E.g. [0, 0,0,2, 3,0,0, 0,2,0] means candidate [3] occurs twice,\n   * [4] 3 times, [8] twice, and all other candidate are absent in the group. \n   */\n  public getCandidateCounts(group: Group) : number[] {\n    let kCounts: number[] = [0,   0, 0, 0,   0, 0, 0,   0, 0, 0];\n    for (let k of VALUES) {\n      if (this.groupContainsValue(group, k)) {\n        continue;   // next candidate\n      }\n      for (let c of group.cells) {\n        if (this.hasValue(c)) {\n          continue;   // next cell in group\n        }\n        if (this.sudokuModel.cells[c].candidates[k]) {\n          kCounts[k]++;\n        }\n      } // for cells in group\n    } // for candidates\n    return kCounts;\n  } // getCandidateCounts()\n      \n  /**\n   * \n   */\n  public isImpossible() : boolean {\n    return !this.isSolutionPossible();\n  } // isImpossible()\n\n  /**\n   * \n   */\n  public getCandidates(c: number) : number[] {\n    if (this.hasValue(c)) {\n      return [];\n    }\n    let candidates: number[] = [];\n    for (let k of CANDIDATES) {\n      if (this.sudokuModel.cells[c].candidates[k]) {\n        candidates.push(k);\n      }\n    }\n    return candidates;\n  } // getCandidates()\n        \n  /**\n   * Returns true if cell contains the candidate.\n   */\n  public isCandidate(c: number, k: number) : boolean {\n    return this.sudokuModel.cells[c].candidates[k];\n  } // isCandidate()\n  \n  /**\n   * A cell is valid if its row, column, and box are all valid. In other words,\n   * no value occurs more than once in the cell's row, column, and box.\n   */\n  public isCellValid(c: number) : boolean {\ntry {\n    if (   this.isGroupValid(this.sudokuModel.rows[Common.rowIdx(c)])\n        && this.isGroupValid(this.sudokuModel.cols[Common.colIdx(c)]) \n        && this.isGroupValid(this.sudokuModel.boxs[Common.boxIdx(c)])) {\n      return true;\n    }\n} catch (e) {\n  console.info('c: ' + c);\n  console.info('r: ' + Common.rowIdx(c));\n  console.info('c: ' + Common.colIdx(c));\n  console.info('b: ' + Common.boxIdx(c));\n}\n    return false;\n  }\n\n  /**\n   * Determines if the given givenValue appears 9 times.\n   */\n  public isValueComplete(v: number) : boolean {\n    let valueCount = 0;\n    for (let c of CELLS) {\n      if (this.sudokuModel.cells[c].value === v) {\n        valueCount++;\n      }\n    }\n    return valueCount === 9;\n  } // isValueComplete()\n\n  /**\n   * \n   */\n  public getNumberOfCandidates(c: number) : number {\n    let count = 0;\n    let cell = this.sudokuModel.cells[c];\n    for (let k of CANDIDATES) {\n      if (cell.candidates[k]) {\n        count++;\n      }\n    }\n    return count;\n  } // getNumberOfCandidates()\n\n  /**\n   * Used by SudokoCreationService.\n   */\n  public removeLastActionLogEntry() : void {\n    this.actionLog.removeLastEntry();\n  } // removeLastActionLogEntry()\n\n  /**\n   * Represent the values of the sudoku as an array of 81 values.\n   */\n  public cellsToValuesArray() : number[] {\n    let v: number[] = [];\n    for (let c of CELLS) {\n      v.push(this.sudokuModel.cells[c].value);\n    }\n    return v;\n  } // cellsToValuesArray()\n\n  /**\n   * \n   */\n  public getLastAction() : Action {\n    return this.actionLog.getLastEntry();\n  } // getLastAction()\n\n  /**\n   * Called by user button press (playComponent.ts) undoLastAction())\n   */\n  public undoLastAction() : void {    // called by user button\n    let lastAction = this.actionLog.getLastEntry();\n    this.undoAction(lastAction);\n    this.actionLog.removeLastEntry();\n  } // undoLastAction()\n\n  /**\n   * \n   */\n  public getActionLogAsString() : string {\n    return this.actionLog.toStringLastFirst();\n  } // getActionLogAsString()\n\n  /**\n   * Refresh all cells candidates by first clearing all then seting \n   * appropriate candidates in all cells that do not have a value.\n   */\n  public refreshAllCandidates() : void {\n    for (let c of CELLS) {\n      if (!this.hasValue(c)) {\n        this.removeAllCellCandidates(c);\n        this.setCellCandidates(c);\n      }\n    }\n  } // refreshCandidates()\n\n  // -------------------------------------------------------------------------\n  // private methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Initialize a cell.\n   */\n  private initializeCell(cell: Cell) : void {\n    cell.value = 0;\n    cell.locked = false;\n    for (let k of CANDIDATES) {\n      cell.candidates[k] = true;\n    }\n  } // initializeCell()\n\n  /**\n   * Initialize a group (row, column, or box).\n   */\n  private initializeGroup(group: Group) : void {\n    for (let v of VALUES) {\n      group.vOccurrences[v] = 0;\n    }\n  } // initializeGroup()\n\n  /**\n   * Set the appropriate candidates in a cell based on values that exist in\n   * the cell's row, column, and box. \n   */\n  private setCellCandidates(c: number) : void {\n\n    // skip cells that have value\n    if (this.hasValue(c)) {\n      return;\n    }\n\n    let cell = this.sudokuModel.cells[c];\n    let row = this.sudokuModel.rows[cell.row];\n    let col = this.sudokuModel.cols[cell.col];\n    let box = this.sudokuModel.boxs[cell.box];\n    \n    // add candidates to cell when value\n    for (let v of VALUES) {\n      if (   row.vOccurrences[v] == 0\n          && col.vOccurrences[v] == 0\n          && box.vOccurrences[v] == 0) {\n      this.addCandidate(c, v);\n      }\n    }\n  } // setCellCandidates()\n\n  /**\n   * A cell's *state* is valid if has a value and no candidates, \n   * OR has no value and one or more candidates. Conversely, a cell's state is\n   * in valid it has no value and no candidates, or has both a value and one \n   * or more candidates.\n   * \n   * Cell state validity considers only the cell's internal consistancy. It's\n   * state may be valid, but it's value may be in conflict with with the same\n   * value occurring in a related group cell.\n   */\n  private isCellStateValid(c: number) : boolean {\n    return ( this.hasValue(c) && !this.hasCandidates(c))\n        || (!this.hasValue(c) &&  this.hasCandidates(c));\n  } // isCellStateValid()\n\n  /**\n   * A group (row, column, or box) is valid if values 1..9 occur no more than\n   * once in the group. \n   */\n  private isGroupValid(group: Group) : boolean {\n    for (let v of VALUES) {\n      if (group.vOccurrences[v] > 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Return true if every cell is in a valid state, and\n   * if every row, column, and box in a valid state.\n   */\n  private isSolutionPossible() : boolean {\n    for (let c of CELLS) {\n      if (!this.isCellStateValid(c)) {\n        return false;\n      }\n    }\n    for (let g of GROUPS) {\n      if (!this.isGroupValid(this.sudokuModel.rows[g])) {\n        return false;\n      }\n      if (!this.isGroupValid(this.sudokuModel.cols[g])) {\n        return false;\n      }\n      if (!this.isGroupValid(this.sudokuModel.boxs[g])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if cell has a value;\n   */\n  private groupContainsValue(group: Group, v: number) : boolean {\n    return group.vOccurrences[v] === 1;\n  } // groupContainsValue()\n\n  /**\n   * Return the number of cells in the group that have a value. That is cells\n   * that are closed or filled. It can be closed by having an initial given \n   * value or by having a value assigned in solving the sudoku. A value cell \n   * cannot have any candidates. Within a group (row, column, or box),\n   *    value cells + candidate cells = 9.\n   */\n  private valueCellsCount(group: Group) : number {\n    let count = 0;\n    for (let v of VALUES) {\n      if (group.vOccurrences[v] > 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Returns true if cell has one or more candidates.\n   */\n  private hasCandidates(c: number) : boolean {\n    for (let k of CANDIDATES) {\n      if (this.sudokuModel.cells[c].candidates[k]) {\n        return true;\n      }\n    }\n    return false;\n  } // hasCandidates()\n\n  /**\n   * Represent the values of the sudoku as an array of 81 values.\n   */\n  private cellValuesToArray() : number[] {\n    let valuesArray: number[] = [];\n    for (let c of CELLS) {\n      valuesArray.push(this.sudokuModel.cells[c].value);\n    }\n    return valuesArray;\n  } // cellsValuesToArray()\n\n  /**\n   * Represent the givenValues of the sudoku as a single-line string.\n   */\n  private toOneLineString() : string {\n    let s = '';\n    let v: number;\n    for (let c of CELLS) {\n      v = this.sudokuModel.cells[c].value;\n      s += (v === 0 ? '.' : v);\n    }\n    return s;\n  } // toOneLineString()\n\n  /**\n   * Represent the givenValues of the sudoku as a grid string.\n   */\n  private toGridString() : string {\n    return this.arrayToGridString(this.cellValuesToArray());\n  } // toGridString()\n\n  /**\n   * Represent the state of a row as a string.\n   */\n  private rowToString(r: number) : string {\n    let s = 'Row' + ' ' + (r + 1) + ': ';\n    return s += this.groupToString(this.sudokuModel.rows[r]);\n  } // rowToString()\n\n  /**\n   * Represent the state of a column as a string.\n   */\n  private colToString(c: number) : string {\n    let s = 'Col' + ' ' + (c + 1) + ': ';\n    return s += this.groupToString(this.sudokuModel.cols[c]);\n  } // colToString()\n\n  /**\n   * Represent the state of a box as a string.\n   */\n  private boxToString(b: number) : string {\n    let s = 'Box' + ' ' + (b + 1) + ': ';\n    return s += this.groupToString(this.sudokuModel.boxs[b]);\n  } // boxToString()\n\n  /**\n   * Represent the state of a row, column, or box as a string. The \"group\"\n   * parameter is the individual row, column, or box.\n   */\n  private groupToString(group : Group) : string {\n    let s = '';\n    for (let v of VALUES) {\n      s += (group.vOccurrences[v] === 0) ? '.' : group.vOccurrences[v];\n      if (v == 3 || v == 6) {\n        s += ' ';\n      }\n    }\n    s += ' ';\n    for (let i = 0; i < group.cells.length; i++) {\n      s += Common.pad(group.cells[i], 2) + ' ';\n      if (i == 2 || i == 5) {\n        s += ' ';\n      }\n    }\n    return s;\n  }\n\n  /**\n   * Represent the state of a cell as a string.\n   */\n  private cellToString(c: number) : string {\n    let cell = this.sudokuModel.cells[c];\n    let s = '' + Common.toRowColString(c) + ': '; \n    s += 'v:' + (cell.value != 0 ? cell.value : '.');\n    s += ' k:';\n    for (let k of CANDIDATES) {\n      s += (cell.candidates[k]) ? k : '.';\n    }\n    s += ' r' + (cell.row + 1) + ' c' + (cell.col + 1) + ' b' + (cell.box + 1);\n    // if (!this.isValid()) {\n    //   s += ' * * *';\n    // }\n    return s;\n  }\n\n  /**\n   * Represent the state of the sudoku as a string.\n   */\n  private toString() : string {\n    let s = '';\n    for (let r of ROWS) {\n      s += this.rowToString(r) + '\\n';\n    }\n    for (let c of COLS) {\n      s += this.colToString(c) + '\\n';\n    }\n    for (let b of BOXS) {\n      s += this.boxToString(b) + '\\n';\n    }\n    for (let c of CELLS) {\n      s += this.cellToString(c) + '\\n';\n    }\n    return s;\n  }\n\n  /**\n   * Represent the state of the sudoku as a string.\n   */\n  private toStringRow(r: number) : string {\n    let s = '';\n    s += this.rowToString(r) + '\\n';\n    for (let c of ROW_CELLS[r]) {\n      s += this.cellToString(c) + '\\n';\n    }\n    return s;\n  }\n\n  /**\n   * \n   */\n  private getCandidates_(r: number, c: number) : number[] {\n    return this.getCandidates(Common.urcToCellIdx(r, c));\n  }\n        \n  /**\n   * Add given candidate to given cell.\n   * - cannot add candidate to cell that has a givenValue\n   * - cannot add candidate if a related cell has that givenValue\n   * \n   * Called by:\n   * - undoAction() - undo REMOVE_CANDIDATE\n   * - removeValue()\n   */\n  private addCandidate(c: number, k: number) : void {\n\n    // do not add if givenValue exists\n    if (this.sudokuModel.cells[c].value > 0) {\n      // console.error('Cannot add candidate to cell with a givenValue.');\n      return;\n    }\n\n    // do not add if any related cell has that givenValue\n    for (let rc of Common.getRelatedCells(c)) {\n      if (this.sudokuModel.cells[rc].value === k) {\n        return;\n      }\n    }\n\n    // add candidate\n    this.sudokuModel.cells[c].candidates[k] = true;\n  } // addCandidate()\n\n  /**\n   * Make every value a candidate because all initialized cells do not have\n   * values.\n   */\n  private setAllCellCandidates(c: number) : void {\n    this.sudokuModel.cells[c].setAllCandidates();\n  } // setAllCellCandidates()\n\n  /**\n   * Remove all candidates from a cell.\n   */\n  private removeAllCellCandidates(c: number) : void {\n    this.sudokuModel.cells[c].unsetAllCandidates();\n  } // removeAllCellCandidates()\n\n  /**\n   * Represent a givenValues array of sudoku cell givenValues as a grid string.\n   */\n  private arrayToGridString(valuesArray: number[]) : string {\n  // private arrayToGridString(valuesArray: number[]) : string {\n    let s = '';\n    let i = 0;\n    let v: number;\n    for (let c of CELLS) {\n      v = valuesArray[c];\n      if (i > 0 && i % 3 == 0 && i % 9 != 0) {\n        s += '| ';\n      } \n      if (i > 0 && i % 9 == 0) {\n        s += '\\n';\n      }\n      if (i > 0 && i % 27 == 0) {\n        s += '------+-------+------\\n';\n      }\n      s += (v === 0 ? '. ' : v + ' ');\n      i++;\n    }\n    return s;\n  } // arrayToGridString()\n\n} // class SudokuService\n\nclass SudokuModel {\n  cells: Cell[]\n  rows: Group[];\n  cols: Group[];\n  boxs: Group[];\n  \n  constructor() {\n    this.cells = new Array(81);\n    this.rows = new Array(9);\n    this.cols = new Array(9);\n    this.boxs = new Array(9);\n\n    for (let g of GROUPS) {\n      this.rows[g] = new Group(ROW_CELLS[g]);\n      this.cols[g] = new Group(COL_CELLS[g]);\n      this.boxs[g] = new Group(BOX_CELLS[g]);\n    }\n\n    for (let c of CELLS) {\n      this.cells[c] = new Cell(\n          Common.rowIdx(c), Common.colIdx(c), Common.boxIdx(c));\n    }\n  }\n} // class SudokuModel\n\nclass Cell {\n  value: number;\n  candidates: boolean[];\n  locked: boolean;\n  row: number;\n  col: number;\n  box: number;\n\n  /**\n   * Initialize the cell to empty: no value and all candidates. Give the cell\n   * a reference to its row, column, and box.\n   * @param row \n   * @param col \n   * @param box \n   */\n  constructor(row: number, col:number, box:number) {\n    this.value = 0;   // no value\n    this.candidates = new Array(10);\n    this.setAllCandidates();  // every value is candidate\n    this.row = row;\n    this.col = col;\n    this.box = box;\n  }\n\n  /**\n   * Make every value a candidate.\n   */\n  public setAllCandidates() : void {\n    for (let k of CANDIDATES) {\n      this.candidates[k] = true;\n    }\n  } // setAllCandidates()\n\n  /**\n   * Clear all candidates.\n   */\n  public unsetAllCandidates() : void {\n    for (let k of CANDIDATES) {\n      this.candidates[k] = false;\n    }\n  } // unsetAllCandidates()\n\n  \n\n} // class Cell\n\nexport class Group {\n  vOccurrences: number[];\n  cells: number[]\n\n  constructor(groupCells: number[]) {\n    this.vOccurrences = new Array(10);\n    for (let v of VALUES) {\n      this.vOccurrences[v] = 0;\n    }\n    this.cells = groupCells;\n  }\n\n} // class Group\n\n\n// WEBPACK FOOTER //\n// ./src/app/model/sudoku.service.ts","// import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Common } from '../../app/common/common';\nimport { Difficulty } from '../../app/model/difficulty';\nimport { Puzzle } from '../../app/model/puzzle';\n\nimport { GuessAction } from '../../app/action/action';\nimport { ActionType } from '../../app/action/action';\nimport { ActionLogService } from '../../app/action/action-log.service';\nimport { ValueHint } from '../../app/hint/hint';\nimport { HintType } from '../../app/hint/hint.type';\nimport { HintService } from '../../app/hint/hint.service';\n\nimport { SudokuService } from '../../app/model/sudoku.service';\n\nimport { VALUES } from     '../../app/common/common';\nimport { CELLS } from      '../../app/common/common';\nimport { ROWS } from       '../../app/common/common';\nimport { COLS } from       '../../app/common/common';\nimport { ROW_CELLS } from  '../../app/common/common';\nimport { COL_CELLS } from  '../../app/common/common';\nimport { ROOT_VALUES } from  '../../app/common/common';\n\n// @Injectable()\nexport class CreationService {\n\n  private randomCellIndexes: number[];\n  private randomValues: number[];\n\n  private actionLog: ActionLogService;\n  private sudokuService: SudokuService;\n  private hintService: HintService;\n\n  constructor(\n      // private actionLog: ActionLogService, \n      // private sudokuService: SudokuService,\n      // private hintService: HintService\n    ) {\n    this.actionLog = new ActionLogService();\n    this.sudokuService = new SudokuService(this.actionLog);\n    this.hintService = new HintService(this.sudokuService);\n  }\n\n  /**\n   * \n   */\n  public createSudoku(difficulty: Difficulty) : string {\nconsole.info('In creationService.createSudoku() difficulty: ' + difficulty);\n\n    let sudoku = new Puzzle();\n    sudoku.desiredDifficulty = difficulty;\n\n    // step 1 - generate random finished sudoku\n    // sudoku.completedPuzzle = this.makeRandomSolution();\n    sudoku.completedPuzzle = this.makeRandomSolution();\n\n    let pass = 0;\n\n    // loop until we get sudoku of desired difficulty\n    let desiredDifficulty = sudoku.desiredDifficulty;\n    while (sudoku.actualDifficulty != desiredDifficulty) {\n      pass++;\n\n      // step 2 - create starting values by paring cells\nconsole.log('Pass: ' + pass);\n      this.getStartingValues(sudoku);\n\n      if (sudoku.initialValues === undefined) {\n        continue;   // desired difficulty has not been attained\n      }\n\n      // step 3 - solve puzzle to get stats and actual difficulty\n      this.completePuzzle(sudoku);\n\nconsole.log('Pass ' + pass + ' diff ' +  sudoku.actualDifficulty);\n\n    } // while not getting desired difficulty\n\n    sudoku.generatePasses = pass;\n// console.info('In creationService.createSudoku() sudoku: ' + sudoku);\n// console.info('In creationService.createSudoku() serialized: ' + sudoku.serialize());\nconsole.info('Created difficulty: ' + sudoku.actualDifficulty \n    + ' in ' + sudoku.generatePasses + ' passes');\n    return sudoku.serialize();\n  } // createSudoku()\n\n  /**\n   * \n   */\n  private initializeLogs() {\n    this.sudokuService.initializeActionLog();\n    this.hintService.initializeHintLog();\n  }\n\n  /**\n   * [Step 1]\n   * Start by seeding values 1..9 in 9 random cells. Then using standard \n   * solving and guessing techniques create a random, consistent, fully \n   * filled-in solution. Return the full solution as a cell values array.\n   */\n  private makeRandomSolution() : number[] {\n\n    let start: number = Date.now();   // for elapsed time\n\n    this.sudokuService.initializeModel();\n    this.initializeLogs();\n    this.randomCellIndexes = Common.shuffleArray(CELLS.slice());\n    this.randomValues = Common.shuffleArray(VALUES.slice());\n    // testing\n    // this.randomCellIndexes = Common.RANDOM_CELLS_1;\n    // this.randomValues = Common.RANDOM_VALUES_1;\n   for (let v of VALUES) {\n      this.sudokuService.setValue(this.randomCellIndexes[v], v, ActionType.GUESS_VALUE);\n    }\n    this.solve();\n\n    let elapsed: number = Date.now() - start;\n    console.info('Step 1 elapsed: ' + elapsed + 'ms');\n\n    return this.sudokuService.cellsToValuesArray();\n  } // makeRandomSolution()\n\n  /**\n   * [Step 1]\n   * Start by seeding values 1..9 in 9 random cells. Then using standard \n   * solving and guessing techniques create a random, consistent, fully \n   * filled-in solution. Return the full solution as a cell values array.\n   */\n  // private makeRandomSolution1() : number[] {\n\n  //   let start: number = Date.now();   // for elapsed time\n\n  //   this.sudokuService.setAllValues(ROOT_VALUES);\n  //   this.randomizeFullSudoku();\n\n  //   let elapsed: number = Date.now() - start;\n  //   console.info('Step 1-1 elapsed: ' + elapsed + 'ms');\n\n  //   return this.sudokuService.cellsToValuesArray();\n  // } // makeRandomSolution()\n\n  /**\n   * [Step 2]\n   */\n  private getStartingValues(puzzle: Puzzle) : void {\n\n    let start: number = Date.now();   // for elapsed time\n\n    this.sudokuService.setAllValues(puzzle.completedPuzzle);\n    this.initializeLogs();\n    this.randomCellIndexes = Common.shuffleArray(CELLS.slice());\n    this.randomValues = Common.shuffleArray(VALUES.slice());\n    let randomParingCells = Common.shuffleArray(CELLS.slice(0, 41));\n    // testing\n    // this.randomCellIndexes = Common.RANDOM_CELLS_2;\n    // this.randomValues = Common.RANDOM_VALUES_2;\n    // let randomParingCells = Common.RANDOM_PARING_CELLS_2;\n    let hardCount: number = 0;\n\n    // just scan half (plus center) cells (0..40); symC is in other half\n    let pairsRemoved = 0;\n    NEXT_CELL:\n    for (let c of randomParingCells) {\n\n      // cell & sym cell are 180deg rotationally symmetric\n      let symC = 80 - c;\n  \n      // save then remove values of symmetric twins \n      let savedValue = this.sudokuService.getValue(c)\n      let savedSymValue = this.sudokuService.getValue(symC);\n      this.sudokuService.removeValue(c);\n      this.sudokuService.removeValue(symC);\n      \n      // pare first 9 pairs without solving (for speed)\n      if (++pairsRemoved <= 9) {\n        continue NEXT_CELL;\n      }\n\n      switch (puzzle.desiredDifficulty) {\n\n        // no guessing cases\n        case Difficulty.EASY:\n        case Difficulty.MEDIUM:\n        case Difficulty.HARD:\n          let hard: boolean = false;\n          while (this.hintService.getHint(puzzle.desiredDifficulty)) {\n\n            // count difficulty hard hints\n            if (this.hintService.getActiveHint().getDifficultyRating() === Difficulty.HARD) {\n              hard = true;\n            }\n\n            this.hintService.applyHint();\n          }\n          let solved = this.sudokuService.isSolved();\n          this.rollbackAll();\n          if (solved) {\n            if (hard) {\n              hardCount++;  // a hard hint was used\n            }\n            continue NEXT_CELL;    // don't restore sym cells\n          } // if not solved, fall through to restore pared cells\n\n        // guess when no hints available\n        case Difficulty.HARDEST:\n          let localSolutionsCount = this.countSolutions();\n          this.rollbackAll();\n          if (localSolutionsCount <= 1) {\n            continue NEXT_CELL;    // don't restore sym cells\n          } // if multiple solutions, fall through to restore pared cells\n      } // switch\n\n      this.sudokuService.setValue(c, savedValue, ActionType.SET_VALUE);\n      this.sudokuService.setValue(symC, savedSymValue, ActionType.SET_VALUE);\n      this.sudokuService.removeLastActionLogEntry(); // keep restores out of action log\n      this.sudokuService.removeLastActionLogEntry(); // keep restores out of action log\n    } // for next random symmetric pairs of cells to pare\n\n    // TODO\n    // at end of step 2 no initial values is a signal that desired difficulty\n    // is not being attained, so no use going on to step 3\n    if (puzzle.desiredDifficulty === Difficulty.HARD\n        && hardCount === 0) {\n      puzzle.initialValues = undefined;\n    } else {\n      puzzle.initialValues = this.sudokuService.cellsToValuesArray();\n    }\n\n    // activate to get and log step 2 elapsed times\n    // let elapsed: number = Date.now() - start;\n    // console.info('Step 2 elapsed: ' + elapsed + 'ms');\n\n  } // getStartingValues() [step 2 - no guesses]\n  \n  /**\n   * [Step 3]\n   * Now having a full solution and initial values, solve the sudoku using\n   * hints and guessing. While doing this, count the specific solution \n   * tehcniques (types of hints, and guesses) to properly determine the\n   * actual difficulty rating.\n   */\n  private completePuzzle(puzzle: Puzzle) : void {\n\n    let start: number = Date.now();   // for elapsed time\n\n    this.initializeLogs();\n\n    this.randomCellIndexes = Common.shuffleArray(CELLS.slice());\n    this.randomValues =  Common.shuffleArray(VALUES.slice());\n    // testing\n    // this.randomCellIndexes = Common.RANDOM_CELLS_3;\n    // this.randomValues = Common.RANDOM_VALUES_3;\n    \n    this.solve();\n\n    puzzle.completedPuzzle = this.sudokuService.cellsToValuesArray();\n    puzzle.stats = this.hintService.getHintCounts();\n    puzzle.actualDifficulty = puzzle.stats.getActualDifficulty();\n\n    let elapsed: number = Date.now() - start;\n    // console.log('Step 3 elapsed: ' + elapsed + 'ms');\n\n  } // completePuzzle() [step 3]\n\n  /**\n   * The basic solving \"machine\". From any point of an incomplete or empty\n   * sudoku, this recursive method will (1) produce a solution, or \n   * (2) conclude that a solution is impossible. This method will not look for\n   * multiple solutions.\n   * \n   * At every step the method first looks for hints and applies them. If no \n   * hint is found, it falls back on making a guess in a random cell that has\n   * the fewest number of candidates. After a guess, it goes back to the \n   * hint/apply loop until (1) a solution, (2) an impasse, or (3) another guess\n   * is required. When an impasse is reached, the method will unwind back to\n   * the last guess and try an alternative guess in that cell. When all\n   * alternatives are exhausted, it will unwind further to any previous guess\n   * and repeat the process until a solution is obtained or it determines that\n   * there is no possible solution.\n   * \n   * In the recursions, whenever true is returned it means a solution has been.\n   * Whenever false is returned it means any guesses have to be unwound or \n   * finally there is no possible solution.\n   */\n  private solve() : boolean {\n    while (this.hintService.getHint(Difficulty.HARDEST) != undefined) {\n      this.hintService.applyHint();\n      if (this.sudokuService.isSolved()) {\n        return true;\t\t// done\n      }\n      if (this.sudokuService.isImpossible()) {\n        return false;\t\t// no value, no candidate cell exists\n      }\n    } // while -- no hint, try guess\n\n    // now we have to resort to guessing\n    let lastGuess: GuessAction = undefined;\n    while (this.guess(lastGuess)) {\t// while guess made\n      if (this.solve()) {\t\t// recursive call -- try new hint\n        // recursive call returned true -> solved!\n        return true;\n      } else {\n        // recursive call returned false -> (1) impossible. (2) no guesses left\n        lastGuess = this.rollbackToLastGuess();\n      }\n    } // while guess()\n\n    return false;\n  } // solve()\n\n  /**\n   * This method is a close parallel with the solve() method except that this\n   * method will look for alternative solutions. The goal is to assure that\n   * there is only one possible solution. If two possible solutions are found,\n   * this is enough to conclude that there is no *unique* solution since a\n   * sudoku requirement that a proper sudoku has only a single unique solution.\n   * \n   * In contrast to the parallel recursive solve() method, at each step this\n   * method returns 1 if a solution is found. A return of 0 implies an impasse\n   * at the recursion step or that there is no possible solution. The recustion\n   * cycle will stop when 2 solutions are found ...............\n   * \n   * This method is used in step 2 in which a starting sudoku is produced from\n   * step 1's full random solution. Step 2 and this method assure a unique \n   * solution using hint and guess techniques appropriate to the target\n   * difficulty rating desired.\n   */\n  private countSolutions() : number {\n    while (this.hintService.getHint(Difficulty.HARDEST) != undefined) {\n      this.hintService.applyHint();\n      if (this.sudokuService.isSolved()) {\n        this.rollbackToLastGuess();\n        return 1;\n      }\n      if (this.sudokuService.isImpossible()) {\n        this.rollbackToLastGuess();\n        return 0;\n      }\n    } // while getHint() -- no hint, try guess\n\n    // now we have to resort to guessing\n    let localSolutionsCount = 0;\n    let lastGuess: GuessAction = undefined;\n    while (this.guess(lastGuess)) {\t// while guess made\n      localSolutionsCount += this.countSolutions(); // recursive call\n      if (localSolutionsCount >= 2) {\n        this.rollbackToLastGuess();\n        return localSolutionsCount;\n      } else {\n         lastGuess = this.rollbackToLastGuess();\n      }\n\n    } // while guess()\n    this.rollbackToLastGuess();\n    return localSolutionsCount;\n  } // countSolutions()\n\n  /**\n   * Makes a guess for a cell value. If a lastGuess is not provided, a cell \n   * with the fewest number is selected. The first guess in a cell is the \n   * first available candidate. If rollbacks dictate a subsequent guess, the \n   * next available candidate is used. \n   */\n  private guess(lastGuess: GuessAction) : boolean {\n    let guessCell: number = undefined;\n    let possibleValues: number[] = [];\n    let guessValue: number = undefined;\n    if (lastGuess == undefined) {\n      guessCell = this.findFewestCandidatesCell();\n      possibleValues = this.sudokuService.getCandidates(guessCell);\n    } else {\n      guessCell = lastGuess.cell;\n      possibleValues = lastGuess.possibleValues;\n      this.sudokuService.removeLastActionLogEntry(); // remove previous action\n      if (possibleValues.length === 0) {\n        return false;\n      }\n    }\n    guessValue = possibleValues[0];   // try 1st available candidate\n    possibleValues = possibleValues.slice(1);   // remove guess value\n    this.hintService.addHintLogEntry(new ValueHint(HintType.GUESS, guessCell, guessValue));\n    this.sudokuService.setValue(guessCell, guessValue, ActionType.GUESS_VALUE, possibleValues);\n    return true;\n  } // guess()\n\n  /**\n   * Find and return the cell index that has the fewest candidates. The cound\n   * cell should never have less than two candidates because zero would mean\n   * the cell has a value, and one would have been earlier identified as a\n   * naked single. Most of the time the fewest candidate cell will have only\n   * two candidates. The cells are searched randomly.\n   */\n  private findFewestCandidatesCell() : number {\n    let minCands = 10;\n    let minCandsCell: number = -1;\n    let currentCellCands: number;\n    for (let c of this.randomCellIndexes) {\n\n      if (this.sudokuService.hasValue(c)) {\n        continue;\n      }\n\n      currentCellCands = this.sudokuService.getNumberOfCandidates(c);\n      if (currentCellCands === 2) {\n        return c;   // can't get lower than 2\n      }\n\n      if (currentCellCands < minCands) {\n        minCands = currentCellCands;\n        minCandsCell = c;\n      }\n\n      // needed?\n      if (minCands <= 2) {\n        break;\t// 0 --> value, 1 --> naked single\n      }\n    }\n    return minCandsCell;\n  } // findFewestCandidatesCell()\n\n  /**\n   * Working backwards undo every action until a guess action \n   */\n  private rollbackToLastGuess() : GuessAction {\n\n    // undo entries that are not guesses\n    let lastAction = this.actionLog.getLastEntry();\n    while (lastAction && lastAction.type != ActionType.GUESS_VALUE) {\n      this.sudokuService.undoAction(lastAction);\n      this.actionLog.removeLastEntry();\n      lastAction = this.actionLog.getLastEntry();\n    }\n\n    if (this.actionLog.getLastEntry() &&\n        this.actionLog.getLastEntry().type === ActionType.GUESS_VALUE) {\n      this.sudokuService.undoAction(this.actionLog.getLastEntry());\n\n      return <GuessAction> this.actionLog.getLastEntry();   // last GUESS_VALUE action\n    }\n    return undefined;\n  } // rollbackToLastGuess()\n\n  /**\n   * Called in step 3 to clear everything except initial (given) values\n   */\n  private rollbackAll() : void {\n    while (this.actionLog.getLastEntry()) {\n      this.sudokuService.undoAction(this.actionLog.getLastEntry());\n      this.actionLog.removeLastEntry();\n    }\n  } // rollbackAll()\n\n  // /**\n  //  * Swap values of two given cells.\n  //  */\n  // private swapCellValues(c1: number, c2: number) {\n  //   let v1 = this.sudokuModel.cells[c1].value;\n  //   this.sudokuModel.cells[c1].value = this.sudokuModel.cells[c2].value;\n  //   this.sudokuModel.cells[c2].value = v1;\n  // } // swapCellValues()\n  \n//   /**\n//    * Swap values of every cell in two given rows. The rows must be in the \n//    * same \"third.\" That is i and j must be 0..2 or 3..5 or 6..8.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, swapping two rows in same group\n//    */\n//   private swapRowValues(r1: number, r2: number) {\n//     // for (let k = 0; k < 9; k++) {\n// // console.info('Swapping rows ' + r1 + ' & ' + r2);\n//     for (let c of COLS) {\n//       // this.swapCellValues(ROW_CELLS[r1][c], ROW_CELLS[r2][c]);\n//       this.sudokuService.swapCellValues(ROW_CELLS[r1][c], ROW_CELLS[r2][c]);\n//     }\n//   } // swapRowValues()\n  \n//   /**\n//    * Swap values of every cell in two given columns. The columns must be in the\n//    * same \"third.\" That is i and j must be 0..2 or 3..5 or 6..8.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, swapping two columns in same group\n//    */\n//   private swapColValues(c1: number, c2: number) {\n// // console.info('Swapping cols ' + c1 + ' & ' + c2);\n//     for (let r of ROWS) {\n//       this.sudokuService.swapCellValues(COL_CELLS[c1][r], COL_CELLS[c2][r]);\n//     }\n//   } // swapColValues()\n  \n//   /**\n//    * Swap values of every cell in groups of rows.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, swapping two groups of rows\n//    */\n//   private swapRowGroupValues(rg1: number, rg2: number) {\n//     for (let k of [0, 1, 2]) {\n//       this.swapRowValues(rg1 + k, rg2 + k);\n//     }\n//   } // swapRowGroupValues()\n  \n//   /**\n//    * Swap values of every cell in groups of columns.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, swapping two groups of columns\n//    */\n//   private swapColGroupValues(cg1: number, cg2: number) {\n//     for (let k of [0, 1, 2]) {\n//       this.swapColValues(cg1 + k, cg2 + k);\n//     }\n//   } // swapColGroupValues()\n\n//   /**\n//    * Get a random number 0..1 (0 or 1). \n//    */\n//   private getRandomZeroOne() : number {\n//     return Math.floor(Math.random() * 2);\n//   } // getRandomZeroOne()\n\n//   /**\n//    * Get a random number 0..2 (0, 1, or 2). \n//    */\n//   private getRandomZeroOneTwo() : number {\n//     return Math.floor(Math.random() * 3);\n//   } // getRandomZeroOneTwo()\n\n//   /**\n//    * Randomize rows and columns within each group.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, swapping two rows in same group\n//    * Step 2, swapping two columns in same group\n//    */\n//   private randomizeGroupRowsAndColumns() {\n//     let i = 0;\n//     let j = 0;\n\n//     // 012, 345, 678\n//     for (let k of [0, 1, 2]) {\n//       i = this.getRandomZeroOneTwo() + (k * 3);\n//       j = ((i + this.getRandomZeroOne() + 1) % 3) + (k * 3);\n//       this.swapRowValues(i, j);\n\n//       i = this.getRandomZeroOneTwo() + (k * 3);\n//       j = ((i + this.getRandomZeroOne() + 1) % 3) + (k * 3);\n//       this.swapColValues(i, j);\n//     }\n//   }\n  \n//   /**\n//    * Randomize groups of rows and columns.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, swapping two groups of rows\n//    * Step 2, swapping two groups of columns\n//    */\n//   private randomizeRowAndColumnGroups() {\n//     let i = this.getRandomZeroOneTwo();\n//     let j = (i + this.getRandomZeroOne() + 1) % 3;\n//     for (let k of [0, 1, 2]) {\n//       this.swapRowValues((i * 3 + k), (j * 3 + k));\n//     }\n\n//     i = this.getRandomZeroOneTwo();\n//     j = (i + this.getRandomZeroOne() + 1) % 3;\n//     for (let k of [0, 1, 2]) {\n//       this.swapColValues((i * 3 + k), (j * 3 + k));\n//     }\n//   }\n\n//   /**\n//    * Randomize cells by transposing across a northwest-southeast diagonal.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, transposing the whole grid (the columns become the rows and vice \n//    * versa)\n//    */\n//   private randomizeDiagonalMirror1() {\n//     for (let r = 0; r < 9; r++) {\n//       for (let c = r + 1; c < 9; c++) {\n//         this.sudokuService.swapCellValues(ROW_CELLS[r][c], ROW_CELLS[c][r]);\n//       }\n//     }\n//   }\n\n//   /**\n//    * Randomize cells by transposing across a northeast-southwest diagonal.\n//    * See http://blog.forret.com/2006/08/14/a-sudoku-challenge-generator/\n//    * Step 2, transposing the whole grid (the columns become the rows and vice \n//    * versa)\n//    */\n//   private randomizeDiagonalMirror2() {\n//     for (let r = 0; r < 9; r++) {         // 0..8\n//       for (let c = 0; c < 8 - r; c++) {   // \n// // console.info(r + ',' + c + ' -- ' + (8 - c) + ',' + (8 - r));\n//         this.sudokuService.swapCellValues(ROW_CELLS[r][c], ROW_CELLS[8 - c][8 -r]);\n//       }\n//     }\n//   }\n\n//   private randomizeFullSudoku() {\n//     this.randomizeGroupRowsAndColumns();\n//     this.randomizeRowAndColumnGroups();\n//     this.randomizeDiagonalMirror1();\n//     this.randomizeDiagonalMirror2();\n//   }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/web-workers/creation-worker/creation.service.ts"],"sourceRoot":""}